-- -----------------------------------------------------------------------------
--
-- sqlparse.cf: SQL - grammar definition in BNF Converter format.
--
-- Copyright (c) 2012-18 K2 Informatics GmbH.  All Rights Reserved.
--
-- This file is provided to you under the Apache License,
-- Version 2.0 (the "License"); you may not use this file
-- except in compliance with the License.  You may obtain
-- a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- -----------------------------------------------------------------------------

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Grammar rules.
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- plsql_block_sql_list -> plsql_block : '$1'.
-- plsql_block_sql_list -> sql_list    : '$1'.

PlSqlBlockSqlList01.              PlSqlBlockSqlList ::= PlSqlBlock ;
PlSqlBlockSqlList02.              PlSqlBlockSqlList ::= SqlList    ;

-- plsql_block -> plsql_body : '$1'.

PlSqlBlock01.                     PlSqlBlock ::= PlSqlBody ;

-- sql_list ->          sql ';'       :         [{'$1',{extra, <<>>}}].
-- sql_list ->          sql ';' extra :         [{'$1','$3'}].
-- sql_list -> sql_list sql ';'       : '$1' ++ [{'$2',{extra, <<>>}}].
-- sql_list -> sql_list sql ';' extra : '$1' ++ [{'$2','$4'}].

SqlList01.                        SqlList ::=         Sql ";"       ;
SqlList02.                        SqlList ::=         Sql ";" Extra ;
SqlList03.                        SqlList ::= SqlList Sql ";"       ;
SqlList04.                        SqlList ::= SqlList Sql ";" Extra ;

-- extra -> NAME  ';' : {extra, unwrap_bin('$1')}.

Extra01.                          Extra ::= "NAME"   ";" ;

-- sql -> manipulative_statement : '$1'.
-- sql -> schema                 : '$1'.

Sql01.                            Sql ::= ManipulativeStatement ;
Sql02.                            Sql ::= Schema ;

-- plsql_body -> BEGIN statement_pragma_list END ';' : {'plsql_body', '$2'}.

PlSqlBody01.                      PlSqlBody ::= "BEGIN" StatementPragmaList "END" ";" ;

-- statement_pragma_list ->                       statement_pragma ';' :         [{'$1', ';'}].
-- statement_pragma_list -> statement_pragma_list statement_pragma ';' : '$1' ++ [{'$2', ';'}].

StatementPragmaList01.            StatementPragmaList ::=                     StatementPragma ;
StatementPragmaList02.            StatementPragmaList ::= StatementPragmaList StatementPragma ;

-- statement_pragma -> assignment_statement           : '$1'.
-- statement_pragma -> close_statement                : '$1'.
-- statement_pragma -> commit_statement               : '$1'.
-- statement_pragma -> cursor_def                     : '$1'.
-- statement_pragma -> delete_statement_positioned    : '$1'.
-- statement_pragma -> delete_statement_searched      : '$1'.
-- statement_pragma -> fetch_statement                : '$1'.
-- statement_pragma -> function_ref                   : '$1'.
-- statement_pragma -> insert_statement               : '$1'.
-- statement_pragma -> open_statement                 : '$1'.
-- statement_pragma -> procedure_call                 : '$1'.
-- statement_pragma -> rollback_statement             : '$1'.
-- statement_pragma -> select_statement               : '$1'.
-- statement_pragma -> update_statement_positioned    : '$1'.
-- statement_pragma -> update_statement_searched      : '$1'.
-- statement_pragma -> WHENEVER NOT FOUND when_action : {when_not_found, '$4'}.
-- statement_pragma -> WHENEVER SQLERROR  when_action : {when_sql_err, '$3'}.

StatementPragma01.                StatementPragma ::= AssignStatement ;
StatementPragma02.                StatementPragma ::= CloseStatement ;
StatementPragma03.                StatementPragma ::= CommitStatement ;
StatementPragma04.                StatementPragma ::= Cursordef ;
StatementPragma05.                StatementPragma ::= DeleteStatementPositioned ;
StatementPragma06.                StatementPragma ::= DeleteStatementSearched ;
StatementPragma07.                StatementPragma ::= FetchStatement ;
StatementPragma08.                StatementPragma ::= FunctionRef ;
StatementPragma09.                StatementPragma ::= InsertStatement ;
StatementPragma10.                StatementPragma ::= OpenStatement ;
StatementPragma11.                StatementPragma ::= ProcedureCall ;
StatementPragma12.                StatementPragma ::= RollbackStatement ;
StatementPragma13.                StatementPragma ::= SelectStatement ;
StatementPragma14.                StatementPragma ::= UpdateStatementPositioned ;
StatementPragma15.                StatementPragma ::= UpdateStatementSearched ;
StatementPragma16.                StatementPragma ::= "WHENEVER" "NOT" "FOUND" WhenAction ;
StatementPragma17.                StatementPragma ::= "WHENEVER" "SQLERROR"    WhenAction ;

-- assignment_statement -> parameter ':=' scalar_opt_as_exp_1 : {':=', '$1', '$3'}.

AssignStatement01.                AssignStatement ::= Parameter ":=" ScalarOptAsExp1 ;

-- procedure_call -> procedure_call -> CALL function_ref : {'call procedure',  '$2'}.

ProcedureCall01.                  ProcedureCall ::= "CALL"  FunctionRef ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- schema definition language
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- schema -> CREATE SCHEMA AUTHORIZATION identifier                     : {'create schema authorization', binary_to_list('$4'), []}.
-- schema -> CREATE SCHEMA AUTHORIZATION identifier schema_element_list : {'create schema authorization', binary_to_list('$4'), '$5'}.

Schema01.                         Schema ::= "CREATE" "SCHEMA" "AUTHORIZATION" Identifier                   ;
Schema02.                         Schema ::= "CREATE" "SCHEMA" "AUTHORIZATION" Identifier SchemaElementList ;

-- schema_element_list ->                     schema_element :         ['$1'].
-- schema_element_list -> schema_element_list schema_element : '$1' ++ ['$2'].

SchemaElementList01.              SchemaElementList ::=                   SchemaElement ;
SchemaElementList02.              SchemaElementList ::= SchemaElementList SchemaElement ;

-- schema_element -> create_table_def : '$1'.
-- schema_element -> view_def         : '$1'.
-- schema_element -> grant_def        : '$1'.

SchemaElement01.                  SchemaElement ::= CreateTableDef ;
SchemaElement02.                  SchemaElement ::= ViewDef        ;
SchemaElement03.                  SchemaElement ::= GrantDef       ;

-- create_role_def -> CREATE ROLE identifier : {'create role', '$3'}.

CreateRoleDef01.                  CreateRoleDef ::= "CREATE" "ROLE" Identifier ;

-- create_table_def -> CREATE             TABLE table '('                              ')' : {'create table', '$3', [],   []}.
-- create_table_def -> CREATE             TABLE table '(' base_table_element_commalist ')' : {'create table', '$3', '$5', []}.
-- create_table_def -> CREATE create_opts TABLE table '('                              ')' : {'create table', '$4', [],   '$2'}.
-- create_table_def -> CREATE create_opts TABLE table '(' base_table_element_commalist ')' : {'create table', '$4', '$6', '$2'}.

CreateTableDef01.                 CreateTableDef ::= "CREATE"            "TABLE" Table "("                           ")" ;
CreateTableDef02.                 CreateTableDef ::= "CREATE"            "TABLE" Table "(" BaseTableElementCommalist ")" ;
CreateTableDef03.                 CreateTableDef ::= "CREATE" CreateOpts "TABLE" Table "("                           ")" ;
CreateTableDef04.                 CreateTableDef ::= "CREATE" CreateOpts "TABLE" Table "(" BaseTableElementCommalist ")" ;

-- create_user_def -> CREATE USER identifier identified                : {'create user', '$3', '$4', []}.
-- create_user_def -> CREATE USER identifier identified user_opts_list : {'create user', '$3', '$4', '$5'}.

CreateUserDef01.                  CreateUserDef ::= "CREATE" "USER" Identifier Identified              ;
CreateUserDef02.                  CreateUserDef ::= "CREATE" "USER" Identifier Identified UserOptsList ;

-- create_index_def -> CREATE                   INDEX            ON table_alias                                                         : {'create index', {},   {},   '$4', [],   {},   {}}.
-- create_index_def -> CREATE                   INDEX            ON table_alias                                     create_index_filter : {'create index', {},   {},   '$4', [],   {},   '$5'}.
-- create_index_def -> CREATE                   INDEX            ON table_alias                   create_index_norm                     : {'create index', {},   {},   '$4', [],   '$5', {}}.
-- create_index_def -> CREATE                   INDEX            ON table_alias                   create_index_norm create_index_filter : {'create index', {},   {},   '$4', [],   '$5', '$6'}.
-- create_index_def -> CREATE                   INDEX            ON table_alias create_index_spec                                       : {'create index', {},   {},   '$4', '$5', {},   {}}.
-- create_index_def -> CREATE                   INDEX            ON table_alias create_index_spec                   create_index_filter : {'create index', {},   {},   '$4', '$5', {},   '$6'}.
-- create_index_def -> CREATE                   INDEX            ON table_alias create_index_spec create_index_norm                     : {'create index', {},   {},   '$4', '$5', '$6', {}}.
-- create_index_def -> CREATE                   INDEX            ON table_alias create_index_spec create_index_norm create_index_filter : {'create index', {},   {},   '$4', '$5', '$6', '$7'}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias                                                         : {'create index', {},   '$3', '$5', [],   {},   {}}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias                                     create_index_filter : {'create index', {},   '$3', '$5', [],   {},   '$6'}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias                   create_index_norm                     : {'create index', {},   '$3', '$5', [],   '$6', {}}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias                   create_index_norm create_index_filter : {'create index', {},   '$3', '$5', [],   '$6', '$7'}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias create_index_spec                                       : {'create index', {},   '$3', '$5', '$6', {},   {}}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias create_index_spec                   create_index_filter : {'create index', {},   '$3', '$5', '$6', {},   '$7'}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias create_index_spec create_index_norm create_index_filter : {'create index', {},   '$3', '$5', '$6', '$7', '$8'}.
-- create_index_def -> CREATE                   INDEX index_name ON table_alias create_index_spec create_index_norm                     : {'create index', {},   '$3', '$5', '$6', '$7', {}}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias                                                         : {'create index', '$2', {},   '$5', [],   {},   {}}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias                                     create_index_filter : {'create index', '$2', {},   '$5', [],   {},   '$6'}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias                   create_index_norm                     : {'create index', '$2', {},   '$5', [],   '$6', {}}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias                   create_index_norm create_index_filter : {'create index', '$2', {},   '$5', [],   '$6', '$7'}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias create_index_spec                                       : {'create index', '$2', {},   '$5', '$6', {},   {}}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias create_index_spec                   create_index_filter : {'create index', '$2', {},   '$5', '$6', {},   '$7'}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias create_index_spec create_index_norm                     : {'create index', '$2', {},   '$5', '$6', '$7', {}}.
-- create_index_def -> CREATE create_index_opts INDEX            ON table_alias create_index_spec create_index_norm create_index_filter : {'create index', '$2', {},   '$5', '$6', '$7', '$8'}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias                                                         : {'create index', '$2', '$4', '$6', [],   {},   {}}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias                                     create_index_filter : {'create index', '$2', '$4', '$6', [],   {},   '$7'}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias                   create_index_norm                     : {'create index', '$2', '$4', '$6', [],   '$7', {}}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias                   create_index_norm create_index_filter : {'create index', '$2', '$4', '$6', [],   '$7', '$8'}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias create_index_spec                                       : {'create index', '$2', '$4', '$6', '$7', {},   {}}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias create_index_spec                   create_index_filter : {'create index', '$2', '$4', '$6', '$7', {},   '$8'}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias create_index_spec create_index_norm                     : {'create index', '$2', '$4', '$6', '$7', '$8', {}}.
-- create_index_def -> CREATE create_index_opts INDEX index_name ON table_alias create_index_spec create_index_norm create_index_filter : {'create index', '$2', '$4', '$6', '$7', '$8', '$9'}.

CreateIndexDef01.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias                                                   ;
CreateIndexDef02.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias                                 CreateIndexFilter ;
CreateIndexDef03.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias                 CreateIndexNorm                   ;
CreateIndexDef04.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias                 CreateIndexNorm CreateIndexFilter ;
CreateIndexDef05.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias CreateIndexSpec                                   ;
CreateIndexDef06.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias CreateIndexSpec                 CreateIndexFilter ;
CreateIndexDef07.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias CreateIndexSpec CreateIndexNorm                   ;
CreateIndexDef08.                 CreateIndexDef ::= "CREATE"                 "INDEX"           "ON" TableAlias CreateIndexSpec CreateIndexNorm CreateIndexFilter ;
CreateIndexDef09.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias                                                   ;
CreateIndexDef10.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias                                 CreateIndexFilter ;
CreateIndexDef11.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias                 CreateIndexNorm                   ;
CreateIndexDef12.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias                 CreateIndexNorm CreateIndexFilter ;
CreateIndexDef13.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias CreateIndexSpec                                   ;
CreateIndexDef14.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias CreateIndexSpec                 CreateIndexFilter ;
CreateIndexDef15.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias CreateIndexSpec CreateIndexNorm                   ;
CreateIndexDef16.                 CreateIndexDef ::= "CREATE"                 "INDEX" IndexName "ON" TableAlias CreateIndexSpec CreateIndexNorm CreateIndexFilter ;
CreateIndexDef17.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias                                                   ;
CreateIndexDef18.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias                                 CreateIndexFilter ;
CreateIndexDef19.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias                 CreateIndexNorm                   ;
CreateIndexDef20.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias                 CreateIndexNorm CreateIndexFilter ;
CreateIndexDef21.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias CreateIndexSpec                                   ;
CreateIndexDef22.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias CreateIndexSpec                 CreateIndexFilter ;
CreateIndexDef23.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias CreateIndexSpec CreateIndexNorm                   ;
CreateIndexDef24.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX"           "ON" TableAlias CreateIndexSpec CreateIndexNorm CreateIndexFilter ;
CreateIndexDef25.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias                                                   ;
CreateIndexDef26.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias                                 CreateIndexFilter ;
CreateIndexDef27.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias                 CreateIndexNorm                   ;
CreateIndexDef28.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias                 CreateIndexNorm CreateIndexFilter ;
CreateIndexDef29.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias CreateIndexSpec                                   ;
CreateIndexDef30.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias CreateIndexSpec                 CreateIndexFilter ;
CreateIndexDef31.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias CreateIndexSpec CreateIndexNorm                   ;
CreateIndexDef32.                 CreateIndexDef ::= "CREATE" CreateIndexOpts "INDEX" IndexName "ON" TableAlias CreateIndexSpec CreateIndexNorm CreateIndexFilter ;

-- create_index_opts -> BITMAP  : bitmap.
-- create_index_opts -> KEYLIST : keylist.
-- create_index_opts -> HASHMAP : hashmap.
-- create_index_opts -> UNIQUE  : unique.

CreateIndexOpts01.                CreateIndexOpts ::= "BITMAP"  ;
CreateIndexOpts02.                CreateIndexOpts ::= "KEYLIST" ;
CreateIndexOpts03.                CreateIndexOpts ::= "HASHMAP" ;
CreateIndexOpts04.                CreateIndexOpts ::= "UNIQUE"  ;

-- index_name ->                identifier : '$1'.
-- index_name -> identifier '.' identifier : list_to_binary(['$1', ".", '$3']).

IndexName01.                      IndexName ::=                Identifier ;
IndexName02.                      IndexName ::= Identifier "." Identifier ;

-- create_index_spec -> '(' create_index_spec_items ')' : '$2'.

CreateIndexSpec01.                CreateIndexSpec ::= "(" CreateIndexSpecItems ")" ;

-- create_index_spec_items -> create_index_spec_column                             : ['$1'].
-- create_index_spec_items -> create_index_spec_column ',' create_index_spec_items : ['$1' | '$3'].

CreateIndexSpecItems01.           CreateIndexSpecItems ::= CreateIndexSpecColumn                          ;
CreateIndexSpecItems02.           CreateIndexSpecItems ::= CreateIndexSpecColumn "," CreateIndexSpecItems ;

-- create_index_spec_column -> identifier      : '$1'.
-- create_index_spec_column -> identifier JSON : jpparse(list_to_binary(['$1',unwrap('$2')])).

CreateIndexSpecColumn01.          CreateIndexSpecColumn ::= Identifier        ;
CreateIndexSpecColumn02.          CreateIndexSpecColumn ::= Identifier "JSON" ;

-- create_index_norm -> NORM_WITH STRING : {norm, unwrap_bin('$2')}.

CreateIndexNorm01.             CreateIndexNorm ::= "NORM_WITH" "STRING" ;

-- create_index_filter -> FILTER_WITH STRING : {filter, unwrap_bin('$2')}.

CreateIndexFilter01.           CreateIndexFilter ::= "FILTER_WITH" "STRING" ;

-- create_opts ->           tbl_type : '$1'.
-- create_opts -> tbl_scope          : '$1'.
-- create_opts -> tbl_scope tbl_type : '$1' ++ '$2'.

CreateOpts01.                     CreateOpts ::=          TblType ;
CreateOpts02.                     CreateOpts ::= TblScope         ;
CreateOpts03.                     CreateOpts ::= TblScope TblType ;

-- tbl_scope -> LOCAL   : [{scope, <<"local">>}].
-- tbl_scope -> CLUSTER : [{scope, <<"cluster">>}].
-- tbl_scope -> SCHEMA  : [{scope, <<"schema">>}].

TblScope01.                       TblScope ::= "LOCAL"   ;
TblScope02.                       TblScope ::= "CLUSTER" ;
TblScope03.                       TblScope ::= "SCHEMA"  ;

-- tbl_type -> SET         : [{type, <<"set">>}].
-- tbl_type -> ORDERED_SET : [{type, <<"ordered_set">>}].
-- tbl_type -> BAG         : [{type, <<"bag">>}].
-- tbl_type -> NAME        : [{type, unwrap_bin('$1')}].

TblType01.                        TblType ::= "SET"         ;
TblType02.                        TblType ::= "ORDERED_SET" ;
TblType03.                        TblType ::= "BAG"         ;
TblType04.                        TblType ::= "NAME"        ;

-- alter_user_def -> ALTER USER user_list  proxy_clause      : {'alter user', '$3', '$4'}.
-- alter_user_def -> ALTER USER identifier spec_list         : {'alter user', '$3', {spec, '$4'}}.
-- alter_user_def -> ALTER USER identifier NAME         NAME : {'alter user', '$3', {spec, [case {string:to_lower(unwrap('$4')), string:to_lower(unwrap('$5'))} of
-- ...

AlterUserDef01.                   AlterUserDef ::= "ALTER" "USER" UserList   ProxyClause        ;
AlterUserDef02.                   AlterUserDef ::= "ALTER" "USER" Identifier SpecList           ;
AlterUserDef03.                   AlterUserDef ::= "ALTER" "USER" Identifier   "NAME"      "NAME" ;

-- user_list -> identifier               : ['$1'].
-- user_list -> identifier ',' user_list : ['$1' | '$3'].

UserList01.                       UserList ::= Identifier              ;
UserList02.                       UserList ::= Identifier "," UserList ;

-- proxy_clause -> GRANT  CONNECT THROUGH ENTERPRISE USERS : {'grant connect', 'enterprise users'}.
-- proxy_clause -> GRANT  CONNECT THROUGH db_user_proxy    : {'grant connect', '$4'}.
-- proxy_clause -> REVOKE CONNECT THROUGH ENTERPRISE USERS : {'revoke connect', 'enterprise users'}.
-- proxy_clause -> REVOKE CONNECT THROUGH db_user_proxy    : {'revoke connect', '$4'}.

ProxyClause01.                    ProxyClause ::= "GRANT"  "CONNECT" "THROUGH" "ENTERPRISE" "USERS" ;
ProxyClause02.                    ProxyClause ::= "GRANT"  "CONNECT" "THROUGH" DbUserProxy          ;
ProxyClause03.                    ProxyClause ::= "REVOKE" "CONNECT" "THROUGH" "ENTERPRISE" "USERS" ;
ProxyClause04.                    ProxyClause ::= "REVOKE" "CONNECT" "THROUGH" DbUserProxy          ;

-- db_user_proxy -> proxy_with                : '$1'.
-- db_user_proxy ->            proxy_auth_req : '$1'.
-- db_user_proxy -> proxy_with proxy_auth_req : {'$1', '$2'}.

DbUserProxy01.                    DbUserProxy ::= ProxyWith                 ;
DbUserProxy02.                    DbUserProxy ::=              ProxyAuthReq ;
DbUserProxy03.                    DbUserProxy ::= ProxyWith    ProxyAuthReq ;

-- proxy_with -> WITH NO ROLES                  : 'with no roles'.
-- proxy_with -> WITH ROLE            role_list : {'with role', '$3'}.
-- proxy_with -> WITH ROLE ALL EXCEPT role_list : {'with role all except', '$5'}.

proxyWith01.                      ProxyWith ::= "WITH" "NO"   "ROLES"                    ;
proxyWith02.                      ProxyWith ::= "WITH" "ROLE"                   RoleList ;
proxyWith03.                      ProxyWith ::= "WITH" "ROLE" "ALL"    "EXCEPT" RoleList ;

-- proxy_auth_req -> AUTHENTICATION REQUIRED : 'authentication required'.

ProxyAuthReq01.                   ProxyAuthReq ::= "AUTHENTICATION" "REQUIRED" ;

-- spec_list -> spec_item           : ['$1'].
-- spec_list -> spec_item spec_list : ['$1'|'$2'].

SpecList01.                       SpecList ::= SpecItem          ;
SpecList02.                       SpecList ::= SpecItem SpecList ;

-- spec_item -> identified : '$1'.
-- spec_item -> user_opt   : '$1'.
-- spec_item -> user_role  : '$1'.

SpecItem01.                       SpecItem ::= Identified ;
SpecItem02.                       SpecItem ::= UserOpt    ;
SpecItem03.                       SpecItem ::= UserRole   ;

-- user_role -> DEFAULT ROLE ALL                  : 'default role all'.
-- user_role -> DEFAULT ROLE ALL EXCEPT role_list : {'default role all except', '$5'}.
-- user_role -> DEFAULT ROLE NONE                 : 'default role none'.
-- user_role -> DEFAULT ROLE            role_list : {'default role', '$3'}.

UserRole01.                       UserRole ::= "DEFAULT" "ROLE" "ALL"                      ;
UserRole02.                       UserRole ::= "DEFAULT" "ROLE" "ALL"    "EXCEPT" RoleList ;
UserRole03.                       UserRole ::= "DEFAULT" "ROLE" "NONE"                     ;
UserRole04.                       UserRole ::= "DEFAULT" "ROLE"                   RoleList ;

-- role_list -> NAME               : [unwrap_bin('$1')].
-- role_list -> NAME ',' role_list : [unwrap_bin('$1') | '$3'].

RoleList01.                       RoleList ::= "NAME"              ;
RoleList02.                       RoleList ::= "NAME" "," RoleList ;

-- identified -> IDENTIFIED            BY identifier : {'identified by',       '$3'}.
-- identified -> IDENTIFIED EXTERNALLY               : {'identified extern',   {}}.
-- identified -> IDENTIFIED EXTERNALLY AS identifier : {'identified extern',   '$4'}.
-- identified -> IDENTIFIED GLOBALLY                 : {'identified globally', {}}.
-- identified -> IDENTIFIED GLOBALLY   AS identifier : {'identified globally', '$4'}.

Identified01.                     Identified ::= "IDENTIFIED"              "BY" Identifier ;
Identified02.                     Identified ::= "IDENTIFIED" "EXTERNALLY"                 ;
Identified03.                     Identified ::= "IDENTIFIED" "EXTERNALLY" "AS" Identifier ;
Identified04.                     Identified ::= "IDENTIFIED" "GLOBALLY"                   ;
Identified05.                     Identified ::= "IDENTIFIED" "GLOBALLY"   "AS" Identifier ;

-- user_opts_list -> user_opt                : ['$1'].
-- user_opts_list -> user_opt user_opts_list : ['$1'] ++ '$2'.

UserOptsList01.                   UserOptsList ::= UserOpt               ;
UserOptsList02.                   UserOptsList ::= UserOpt  UserOptsList ;

-- user_opt -> DEFAULT   TABLESPACE identifier : [{'default tablespace',   '$3'}].
-- user_opt -> TEMPORARY TABLESPACE identifier : [{'temporary tablespace', '$3'}].
-- user_opt -> quota_list                      : [{quotas,  '$1'}].
-- user_opt -> PROFILE              identifier : [{profile, '$2'}].

UserOpt01.                        UserOpt ::= "DEFAULT"   "TABLESPACE" Identifier ;
UserOpt02.                        UserOpt ::= "TEMPORARY" "TABLESPACE" Identifier ;
UserOpt03.                        UserOpt ::= QuotaList                       ;
UserOpt04.                        UserOpt ::= "PROFILE"                Identifier ;

-- quota_list -> quota            : ['$1'].
-- quota_list -> quota quota_list : ['$1'] ++ '$2'.

QuotaList01.                      QuotaList ::= Quota           ;
QuotaList02.                      QuotaList ::= Quota QuotaList ;

-- quota -> QUOTA UNLIMITED         ON identifier : {'unlimited on', '$4'}.
-- quota -> QUOTA INTNUM            ON identifier : {limited, unwrap_bin('$2'), <<"">>, '$4'}.
-- quota -> QUOTA INTNUM identifier ON identifier : {limited, unwrap_bin('$2'), '$3',   '$5'}.

Quota01.                          Quota ::= "QUOTA" "UNLIMITED"        "ON" Identifier ;
Quota02.                          Quota ::= "QUOTA" "INTNUM"           "ON" Identifier ;
Quota03.                          Quota ::= "QUOTA" "INTNUM"    "NAME" "ON" Identifier ;

-- table_list ->                table :         ['$1'].
-- table_list -> table_list ',' table : '$1' ++ ['$3'].

TableList01.                      TableList ::=               Table ;
TableList02.                      TableList ::= TableList "," Table ;

-- exists -> IF EXISTS : 'exists'.

Exists01.                      Exists ::= "IF" "EXISTS" ;

-- base_table_element_commalist ->                                  base_table_element :         ['$1'].
-- base_table_element_commalist -> base_table_element_commalist ',' base_table_element : '$1' ++ ['$3'].

BaseTableElementCommalist01.      BaseTableElementCommalist ::=                               BaseTableElement ;
BaseTableElementCommalist02.      BaseTableElementCommalist ::= BaseTableElementCommalist "," BaseTableElement ;

-- base_table_element -> column_def           : '$1'.
-- base_table_element -> table_constraint_def : '$1'.

BaseTableElement01.               BaseTableElement ::= ColumnDef          ;
BaseTableElement02.               BaseTableElement ::= TableConstraintDef ;

-- column_def -> column data_type                 : {'$1', '$2', []}.
-- column_def -> column data_type column_def_list : {'$1', '$2', '$3'}.

ColumnDef01.                      ColumnDef ::= Column DataType               ;
ColumnDef02.                      ColumnDef ::= Column DataType ColumnDefList ;

-- column_def_list ->                 column_def_opt : ['$1'].
-- column_def_list -> column_def_list column_def_opt : '$1' ++ ['$2'].

ColumnDefList01.                  ColumnDefList ::=               ColumnDefOpt ;
ColumnDefList02.                  ColumnDefList ::= ColumnDefList ColumnDefOpt ;

-- column_def_opt -> NOT NULLX                                 : 'not null'.
-- column_def_opt -> NOT NULLX UNIQUE                          : 'not null unique'.
-- column_def_opt -> NOT NULLX PRIMARY KEY                     : 'not null primary key'.
-- column_def_opt -> DEFAULT function_ref                      : {default, '$2'}.
-- column_def_opt -> DEFAULT identifier                        : {default, '$2'}.
-- column_def_opt -> DEFAULT literal                           : {default, '$2'}.
-- column_def_opt -> DEFAULT NULLX                             : {default, 'null'}.
-- column_def_opt -> DEFAULT USER                              : {default, 'user'}.
-- column_def_opt -> CHECK '(' search_condition ')'            : {check, '$3'}.
-- column_def_opt -> REFERENCES table                          : {ref, '$2'}.
-- column_def_opt -> REFERENCES table '(' column_commalist ')' : {ref, {'$2', '$4'}}.

ColumnDefOpt01.                   ColumnDefOpt ::= "NOT" "NULL"                               ;
ColumnDefOpt02.                   ColumnDefOpt ::= "NOT" "NULL" "UNIQUE"                      ;
ColumnDefOpt03.                   ColumnDefOpt ::= "NOT" "NULL" "PRIMARY" "KEY"               ;
ColumnDefOpt04.                   ColumnDefOpt ::= "DEFAULT" FunctionRef                      ;
ColumnDefOpt05.                   ColumnDefOpt ::= "DEFAULT" Literal                          ;
ColumnDefOpt06.                   ColumnDefOpt ::= "DEFAULT" Identifier                       ;
ColumnDefOpt07.                   ColumnDefOpt ::= "DEFAULT" "NULL"                           ;
ColumnDefOpt08.                   ColumnDefOpt ::= "DEFAULT" "USER"                           ;
ColumnDefOpt09.                   ColumnDefOpt ::= "CHECK" "(" SearchCondition ")"            ;
ColumnDefOpt10.                   ColumnDefOpt ::= "REFERENCES" Table                         ;
ColumnDefOpt11.                   ColumnDefOpt ::= "REFERENCES" Table "(" ColumnCommalist ")" ;

-- table_constraint_def ->                       UNIQUE      '(' column_commalist ')'                                           : {unique,        [],   '$3'}.
-- table_constraint_def ->                       PRIMARY KEY '(' column_commalist ')'                                           : {'primary key', [],   '$4'}.
-- table_constraint_def ->                       FOREIGN KEY '(' column_commalist ')' REFERENCES table                          : {'foreign key', [],   '$4', {'ref', '$7'}}.
-- table_constraint_def ->                       FOREIGN KEY '(' column_commalist ')' REFERENCES table '(' column_commalist ')' : {'foreign key', [],   '$4', {'ref', {'$7', '$9'}}}.
-- table_constraint_def ->                       CHECK '(' search_condition ')'                                                 : {check,         [],   '$3'}.
-- table_constraint_def -> CONSTRAINT identifier UNIQUE      '(' column_commalist ')'                                           : {unique,        '$2', '$5'}.
-- table_constraint_def -> CONSTRAINT identifier PRIMARY KEY '(' column_commalist ')'                                           : {'primary key', '$2', '$6'}.
-- table_constraint_def -> CONSTRAINT identifier FOREIGN KEY '(' column_commalist ')' REFERENCES table                          : {'foreign key', '$2', '$6', {'ref', '$9'}}.
-- table_constraint_def -> CONSTRAINT identifier FOREIGN KEY '(' column_commalist ')' REFERENCES table '(' column_commalist ')' : {'foreign key', '$2', '$6', {'ref', {'$9', '$11'}}}.
-- table_constraint_def -> CONSTRAINT identifier CHECK '(' search_condition ')'                                                 : {check,         '$2', '$5'}.

TableConstraintDef01.             TableConstraintDef ::=                         "UNIQUE"        "(" ColumnCommalist ")"                                            ;
TableConstraintDef02.             TableConstraintDef ::=                         "PRIMARY" "KEY" "(" ColumnCommalist ")"                                            ;
TableConstraintDef03.             TableConstraintDef ::=                         "FOREIGN" "KEY" "(" ColumnCommalist ")" "REFERENCES" Table                         ;
TableConstraintDef04.             TableConstraintDef ::=                         "FOREIGN" "KEY" "(" ColumnCommalist ")" "REFERENCES" Table "(" ColumnCommalist ")" ;
TableConstraintDef05.             TableConstraintDef ::=                         "CHECK"         "(" SearchCondition ")"                                            ;
TableConstraintDef06.             TableConstraintDef ::= "CONSTRAINT" Identifier "UNIQUE"        "(" ColumnCommalist ")"                                            ;
TableConstraintDef07.             TableConstraintDef ::= "CONSTRAINT" Identifier "PRIMARY" "KEY" "(" ColumnCommalist ")"                                            ;
TableConstraintDef08.             TableConstraintDef ::= "CONSTRAINT" Identifier "FOREIGN" "KEY" "(" ColumnCommalist ")" "REFERENCES" Table                         ;
TableConstraintDef09.             TableConstraintDef ::= "CONSTRAINT" Identifier "FOREIGN" "KEY" "(" ColumnCommalist ")" "REFERENCES" Table "(" ColumnCommalist ")" ;
TableConstraintDef10.             TableConstraintDef ::= "CONSTRAINT" Identifier "CHECK"         "(" SearchCondition ")"                                            ;

-- column_commalist -> column                      : ['$1'].
-- column_commalist -> column ',' column_commalist : ['$1' | '$3'].

ColumnCommalist01.                ColumnCommalist ::= Column                     ;
ColumnCommalist02.                ColumnCommalist ::= Column "," ColumnCommalist ;

-- view_def -> CREATE VIEW table                          AS query_spec                   : {'create view', '$3', [],   {as, '$5', []}}.
-- view_def -> CREATE VIEW table                          AS query_spec WITH CHECK OPTION : {'create view', '$3', [],   {as, '$5', "with check option"}}.
-- view_def -> CREATE VIEW table '(' column_commalist ')' AS query_spec                   : {'create view', '$3', '$5', {as, '$8', []}}.
-- view_def -> CREATE VIEW table '(' column_commalist ')' AS query_spec WITH CHECK OPTION : {'create view', '$3', '$5', {as, '$8', "with check option"}}.

ViewDef01.                        ViewDef ::= "CREATE" "VIEW" Table                 "AS" QuerySpec                         ;
ViewDef02.                        ViewDef ::= "CREATE" "VIEW" Table                 "AS" QuerySpec "WITH" "CHECK" "OPTION" ;
ViewDef03.                        ViewDef ::= "CREATE" "VIEW" Table ColumnCommalist "AS" QuerySpec                         ;
ViewDef04.                        ViewDef ::= "CREATE" "VIEW" Table ColumnCommalist "AS" QuerySpec "WITH" "CHECK" "OPTION" ;

-- grant_def -> GRANT ALL PRIVILEGES        on_obj_clause TO grantee_revokee_commalist                          : {grant, ['all privileges'], '$4',         {to, '$6'},   ''}.
-- grant_def -> GRANT object_privilege_list on_obj_clause TO grantee_revokee_commalist                          : {grant, '$2',               '$3',         {to, '$5'},   ''}.
-- grant_def -> GRANT ALL PRIVILEGES        on_obj_clause TO grantee_identified_by                              : {grant, ['all privileges'], '$4',         {to, ['$6']}, ''}.
-- grant_def -> GRANT object_privilege_list on_obj_clause TO grantee_identified_by                              : {grant, '$2',               '$3',         {to, ['$5']}, ''}.
-- grant_def -> GRANT ALL PRIVILEGES        on_obj_clause TO grantee_revokee_commalist object_with_grant_option : {grant, ['all privileges'], '$4',         {to, '$6'},   '$7'}.
-- grant_def -> GRANT object_privilege_list on_obj_clause TO grantee_revokee_commalist object_with_grant_option : {grant, '$2',               '$3',         {to, '$5'},   '$6'}.
-- grant_def -> GRANT ALL PRIVILEGES        on_obj_clause TO grantee_identified_by     object_with_grant_option : {grant, ['all privileges'], '$4',         {to, ['$6']}, '$7'}.
-- grant_def -> GRANT object_privilege_list on_obj_clause TO grantee_identified_by     object_with_grant_option : {grant, '$2',               '$3',         {to, ['$5']}, '$6'}.
-- grant_def -> GRANT ALL PRIVILEGES                      TO grantee_revokee_commalist                          : {grant, ['all privileges'], {on, <<"">>}, {to, '$5'},   ''}.
-- grant_def -> GRANT system_privilege_list               TO grantee_revokee_commalist                          : {grant, '$2',               {on, <<"">>}, {to, '$4'},   ''}.
-- grant_def -> GRANT ALL PRIVILEGES                      TO grantee_identified_by                              : {grant, ['all privileges'], {on, <<"">>}, {to, ['$5']}, ''}.
-- grant_def -> GRANT system_privilege_list               TO grantee_identified_by                              : {grant, '$2',               {on, <<"">>}, {to, ['$4']}, ''}.
-- grant_def -> GRANT ALL PRIVILEGES                      TO grantee_revokee_commalist system_with_grant_option : {grant, ['all privileges'], {on, <<"">>}, {to, '$5'},   '$6'}.
-- grant_def -> GRANT system_privilege_list               TO grantee_revokee_commalist system_with_grant_option : {grant, '$2',               {on, <<"">>}, {to, '$4'},   '$5'}.
-- grant_def -> GRANT ALL PRIVILEGES                      TO grantee_identified_by     system_with_grant_option : {grant, ['all privileges'], {on, <<"">>}, {to, ['$5']}, '$6'}.
-- grant_def -> GRANT system_privilege_list               TO grantee_identified_by     system_with_grant_option : {grant, '$2',               {on, <<"">>}, {to, ['$4']}, '$5'}.

GrantDef01.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"  OnObjClause "TO" GranteeRevokeeCommalist                       ;
GrantDef02.                       GrantDef ::= "GRANT" ObjectPrivilegeList OnObjClause "TO" GranteeRevokeeCommalist                       ;
GrantDef03.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"  OnObjClause "TO" GranteeIdentifiedBy                           ;
GrantDef04.                       GrantDef ::= "GRANT" ObjectPrivilegeList OnObjClause "TO" GranteeIdentifiedBy                           ;
GrantDef05.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"  OnObjClause "TO" GranteeRevokeeCommalist ObjectWithGrantOption ;
GrantDef06.                       GrantDef ::= "GRANT" ObjectPrivilegeList OnObjClause "TO" GranteeRevokeeCommalist ObjectWithGrantOption ;
GrantDef07.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"  OnObjClause "TO" GranteeIdentifiedBy     ObjectWithGrantOption ;
GrantDef08.                       GrantDef ::= "GRANT" ObjectPrivilegeList OnObjClause "TO" GranteeIdentifiedBy     ObjectWithGrantOption ;
GrantDef09.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"              "TO" GranteeRevokeeCommalist                       ;
GrantDef10.                       GrantDef ::= "GRANT" SystemPrivilegeList             "TO" GranteeRevokeeCommalist                       ;
GrantDef11.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"              "TO" GranteeIdentifiedBy                           ;
GrantDef12.                       GrantDef ::= "GRANT" SystemPrivilegeList             "TO" GranteeIdentifiedBy                           ;
GrantDef13.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"              "TO" GranteeRevokeeCommalist SystemWithGrantOption ;
GrantDef14.                       GrantDef ::= "GRANT" SystemPrivilegeList             "TO" GranteeRevokeeCommalist SystemWithGrantOption ;
GrantDef15.                       GrantDef ::= "GRANT" "ALL" "PRIVILEGES"              "TO" GranteeIdentifiedBy     SystemWithGrantOption ;
GrantDef16.                       GrantDef ::= "GRANT" SystemPrivilegeList             "TO" GranteeIdentifiedBy     SystemWithGrantOption ;

-- revoke_def -> REVOKE ALL PRIVILEGES        on_obj_clause FROM grantee_revokee_commalist                           : {revoke, ['all privileges'], '$4',         {from, '$6'}, ''}.
-- revoke_def -> REVOKE object_privilege_list on_obj_clause FROM grantee_revokee_commalist                           : {revoke, '$2',               '$3',         {from, '$5'}, ''}.
-- revoke_def -> REVOKE ALL PRIVILEGES        on_obj_clause FROM grantee_revokee_commalist object_with_revoke_option : {revoke, ['all privileges'], '$4',         {from, '$6'}, '$7'}.
-- revoke_def -> REVOKE object_privilege_list on_obj_clause FROM grantee_revokee_commalist object_with_revoke_option : {revoke, '$2',               '$3',         {from, '$5'}, '$6'}.
-- revoke_def -> REVOKE ALL PRIVILEGES                      FROM grantee_revokee_commalist                           : {revoke, ['all privileges'], {on, <<"">>}, {from, '$5'}, ''}.
-- revoke_def -> REVOKE system_privilege_list               FROM grantee_revokee_commalist                           : {revoke, '$2',               {on, <<"">>}, {from, '$4'}, ''}.

RevokeDef01.                      RevokeDef ::= "REVOKE" "ALL" "PRIVILEGES"  OnObjClause "FROM" GranteeRevokeeCommalist                        ;
RevokeDef02.                      RevokeDef ::= "REVOKE" ObjectPrivilegeList OnObjClause "FROM" GranteeRevokeeCommalist                        ;
RevokeDef03.                      RevokeDef ::= "REVOKE" "ALL" "PRIVILEGES"  OnObjClause "FROM" GranteeRevokeeCommalist ObjectWithRevokeOption ;
RevokeDef04.                      RevokeDef ::= "REVOKE" ObjectPrivilegeList OnObjClause "FROM" GranteeRevokeeCommalist ObjectWithRevokeOption ;
RevokeDef05.                      RevokeDef ::= "REVOKE" "ALL" "PRIVILEGES"              "FROM" GranteeRevokeeCommalist                        ;
RevokeDef06.                      RevokeDef ::= "REVOKE" SystemPrivilegeList             "FROM" GranteeRevokeeCommalist                        ;

-- grantee_identified_by -> identifier IDENTIFIED BY STRING : {'identified by', '$1', unwrap_bin('$4')}.

GranteeIdentifiedBy01.                GranteeIdentifiedBy ::= Identifier "IDENTIFIED" "BY" "STRING" ;

-- grantee_revokee -> identifier : '$1'.
-- grantee_revokee -> PUBLIC     : 'public'.

GranteeRevokee01.                 GranteeRevokee ::= Identifier ;
GranteeRevokee02.                 GranteeRevokee ::= "PUBLIC"   ;

-- grantee_revokee_commalist ->                               grantee_revokee :         ['$1'].
-- grantee_revokee_commalist -> grantee_revokee_commalist ',' grantee_revokee : '$1' ++ ['$3'].

GranteeRevokeeCommalist01.            GranteeRevokeeCommalist ::= GranteeRevokee                         ;
GranteeRevokeeCommalist02.            GranteeRevokeeCommalist ::= GranteeRevokee "," GranteeRevokeeCommalist ;

-- object_privilege -> ALL        : 'all'.
-- object_privilege -> ALTER      : 'alter'.
-- object_privilege -> DELETE     : 'delete'.
-- object_privilege -> EXECUTE    : 'execute'.
-- object_privilege -> INDEX      : 'index'.
-- object_privilege -> INSERT     : 'insert'.
-- object_privilege -> REFERENCES : 'references'.
-- object_privilege -> SELECT     : 'select'.
-- object_privilege -> UPDATE     : 'update'.

ObjectPrivilege01.                ObjectPrivilege ::= "ALL"         ;
ObjectPrivilege02.                ObjectPrivilege ::= "ALTER"       ;
ObjectPrivilege03.                ObjectPrivilege ::= "DELETE"      ;
ObjectPrivilege04.                ObjectPrivilege ::= "EXECUTE"     ;
ObjectPrivilege05.                ObjectPrivilege ::= "INDEX"       ;
ObjectPrivilege06.                ObjectPrivilege ::= "INSERT"      ;
ObjectPrivilege07.                ObjectPrivilege ::= "REFEFRENCES" ;
ObjectPrivilege08.                ObjectPrivilege ::= "SELECT"      ;
ObjectPrivilege09.                ObjectPrivilege ::= "UPDATE"      ;

-- object_privilege_list -> object_privilege                           : ['$1'].
-- object_privilege_list -> object_privilege ',' object_privilege_list : ['$1'|'$3'].

ObjectPrivilegeList01.            ObjectPrivilegeList ::= ObjectPrivilege                         ;
ObjectPrivilegeList02.            ObjectPrivilegeList ::= ObjectPrivilege "," ObjectPrivilegeList ;

-- object_with_grant_option -> WITH GRANT     OPTION : 'with grant option'.
-- object_with_grant_option -> WITH HIERARCHY OPTION : 'with hierarchy option'.

ObjectWithGrantOption01.          ObjectWithGrantOption ::= "WITH" "GRANT"     "OPTION" ;
ObjectWithGrantOption02.          ObjectWithGrantOption ::= "WITH" "HIERARCHY" "OPTION" ;

-- object_with_revoke_option -> CASCADE CONSTRAINTS : 'cascade constraints'.
-- object_with_revoke_option -> FORCE               : 'force'.

ObjectWithRevokeOption01.         ObjectWithRevokeOption ::= "CASCADE" "CONSTRAINTS" ;
ObjectWithRevokeOption02.         ObjectWithRevokeOption ::= "FORCE"                 ;

-- on_obj_clause -> ON DIRECTORY identifier : {'on directory','$3'}.
-- on_obj_clause -> ON table                : {on,            '$2'}.

OnObjClause01.                    OnObjClause ::= "ON" "DIRECTORY" Identifier ;
OnObjClause02.                    OnObjClause ::= "ON" Table                  ;

-- system_privilege -> ADMIN                        : 'admin'.
-- system_privilege -> ALTER ANY INDEX              : 'alter any index'.
-- system_privilege -> ALTER ANY MATERIALIZED VIEW  : 'alter any materialized view'.
-- system_privilege -> ALTER ANY TABLE              : 'alter any table'.
-- system_privilege -> ALTER ANY VIEW               : 'alter any view'.
-- system_privilege -> CREATE ANY INDEX             : 'create any index'.
-- system_privilege -> CREATE ANY MATERIALIZED VIEW : 'create any materialized view'.
-- system_privilege -> CREATE ANY TABLE             : 'create any table'.
-- system_privilege -> CREATE ANY VIEW              : 'create any view'.
-- system_privilege -> CREATE MATERIALIZED VIEW     : 'create materialized view'.
-- system_privilege -> CREATE TABLE                 : 'create table'.
-- system_privilege -> CREATE VIEW                  : 'create view'.
-- system_privilege -> DELETE ANY TABLE             : 'delete any table'.
-- system_privilege -> DROP ANY INDEX               : 'drop any index'.
-- system_privilege -> DROP ANY MATERIALIZED VIEW   : 'drop any materialized view'.
-- system_privilege -> DROP ANY TABLE               : 'drop any table'.
-- system_privilege -> DROP ANY VIEW                : 'drop any view'.
-- system_privilege -> INSERT ANY TABLE             : 'insert any table'.
-- system_privilege -> SELECT ANY TABLE             : 'select any table'.
-- system_privilege -> UPDATE ANY TABLE             : 'update any table'.
-- system_privilege -> NAME                         : strl2atom(['$1']).

SystemPrivilege01.                SystemPrivilege ::= "ADMIN"                              ;
SystemPrivilege02.                SystemPrivilege ::= "ALTER"  "ANY" "INDEX"               ;
SystemPrivilege03.                SystemPrivilege ::= "ALTER"  "ANY" "MATERIALIZED" "VIEW" ;
SystemPrivilege04.                SystemPrivilege ::= "ALTER"  "ANY" "TABLE"               ;
SystemPrivilege05.                SystemPrivilege ::= "ALTER"  "ANY" "VIEW"                ;
SystemPrivilege06.                SystemPrivilege ::= "CREATE" "ANY" "INDEX"               ;
SystemPrivilege07.                SystemPrivilege ::= "CREATE" "ANY" "MATERIALIZED" "VIEW" ;
SystemPrivilege08.                SystemPrivilege ::= "CREATE" "ANY" "TABLE"               ;
SystemPrivilege09.                SystemPrivilege ::= "CREATE" "ANY" "VIEW"                ;
SystemPrivilege10.                SystemPrivilege ::= "CREATE"       "MATERIALIZED" "VIEW" ;
SystemPrivilege11.                SystemPrivilege ::= "CREATE"       "TABLE"               ;
SystemPrivilege12.                SystemPrivilege ::= "CREATE"       "VIEW"                ;
SystemPrivilege13.                SystemPrivilege ::= "DELETE" "ANY" "TABLE"               ;
SystemPrivilege14.                SystemPrivilege ::= "DROP"   "ANY" "INDEX"               ;
SystemPrivilege15.                SystemPrivilege ::= "DROP"   "ANY" "MATERIALIZED" "VIEW" ;
SystemPrivilege16.                SystemPrivilege ::= "DROP"   "ANY" "TABLE"               ;
SystemPrivilege17.                SystemPrivilege ::= "DROP"   "ANY" "VIEW"                ;
SystemPrivilege18.                SystemPrivilege ::= "INSERT" "ANY" "TABLE"               ;
SystemPrivilege19.                SystemPrivilege ::= "SELECT" "ANY" "TABLE"               ;
SystemPrivilege20.                SystemPrivilege ::= "UPDATE" "ANY" "TABLE"               ;
SystemPrivilege21.                SystemPrivilege ::= "NAME"                               ;

-- system_privilege_list -> system_privilege                           : ['$1'].
-- system_privilege_list -> system_privilege ',' system_privilege_list : ['$1'|'$3'].

SystemPrivilegeList01.            SystemPrivilegeList ::= SystemPrivilege                         ;
SystemPrivilegeList02.            SystemPrivilegeList ::= SystemPrivilege "," SystemPrivilegeList ;

-- system_with_grant_option -> WITH ADMIN    OPTION : 'with admin option'.
-- system_with_grant_option -> WITH DELEGATE OPTION : 'with delegate option'.

SystemWithGrantOption01.          SystemWithGrantOption ::= "WITH" "ADMIN"    "OPTION" ;
SystemWithGrantOption02.          SystemWithGrantOption ::= "WITH" "DELEGATE" "OPTION" ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Cursor definition
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- cursor_def -> CURSOR cursor IS query_exp : {cursor_def, '$2', '$4'}.

Cursordef01.                      Cursordef ::= "CURSOR" Cursor "IS" QueryExp ;

-- order_by_clause -> ORDER BY ordering_spec_commalist : {'order by', '$3'}.

OrderByClause01.                  OrderByClause ::= "ORDER" "BY" OrderingSpecCommalist ;

-- ordering_spec_commalist ->                             ordering_spec :         ['$1'].
-- ordering_spec_commalist -> ordering_spec_commalist ',' ordering_spec : '$1' ++ ['$3'].

OrderingSpecCommalist01.          OrderingSpecCommalist ::=                           OrderingSpec ;
OrderingSpecCommalist02.          OrderingSpecCommalist ::= OrderingSpecCommalist "," OrderingSpec ;

-- ordering_spec -> scalar_exp          : {'$1', <<>>}.
-- ordering_spec -> scalar_exp asc_desc : {'$1', '$2'}.

OrderingSpec01.                   OrderingSpec ::= ScalarExp         ;
OrderingSpec02.                   OrderingSpec ::= ScalarExp AscDesc ;

-- asc_desc -> ASC  : <<"asc">>.
-- asc_desc -> DESC : <<"desc">>.

AscDesc01.                     AscDesc ::= "ASC"      ;
AscDesc02.                     AscDesc ::= "DESC"     ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- manipulative statements
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- manipulative_statement -> alter_user_def              : '$1'.
-- manipulative_statement -> create_index_def            : '$1'.
-- manipulative_statement -> create_role_def             : '$1'.
-- manipulative_statement -> create_table_def            : '$1'.
-- manipulative_statement -> create_user_def             : '$1'.
-- manipulative_statement -> delete_statement_positioned : '$1'.
-- manipulative_statement -> delete_statement_searched   : '$1'.
-- manipulative_statement -> drop_cluster_def            : '$1'.
-- manipulative_statement -> drop_context_def            : '$1'.
-- manipulative_statement -> drop_database_def           : '$1'.
-- manipulative_statement -> drop_database_link_def      : '$1'.
-- manipulative_statement -> drop_directory_def          : '$1'.
-- manipulative_statement -> drop_function_def           : '$1'.
-- manipulative_statement -> drop_index_def              : '$1'.
-- manipulative_statement -> drop_materialized_view_def  : '$1'.
-- manipulative_statement -> drop_package_def            : '$1'.
-- manipulative_statement -> drop_procedure_def          : '$1'.
-- manipulative_statement -> drop_profile_def            : '$1'.
-- manipulative_statement -> drop_role_def               : '$1'.
-- manipulative_statement -> drop_sequence_def           : '$1'.
-- manipulative_statement -> drop_synonym_def            : '$1'.
-- manipulative_statement -> drop_table_def              : '$1'.
-- manipulative_statement -> drop_tablespace_def         : '$1'.
-- manipulative_statement -> drop_trigger_def            : '$1'.
-- manipulative_statement -> drop_type_def               : '$1'.
-- manipulative_statement -> drop_type_body_def          : '$1'.
-- manipulative_statement -> drop_user_def               : '$1'.
-- manipulative_statement -> drop_view_def               : '$1'.
-- manipulative_statement -> grant_def                   : '$1'.
-- manipulative_statement -> insert_statement            : '$1'.
-- manipulative_statement -> revoke_def                  : '$1'.
-- manipulative_statement -> select_statement            : '$1'.
-- manipulative_statement -> truncate_cluster            : '$1'.
-- manipulative_statement -> truncate_table              : '$1'.
-- manipulative_statement -> update_statement_positioned : '$1'.
-- manipulative_statement -> update_statement_searched   : '$1'.
-- manipulative_statement -> view_def                    : '$1'.

ManipulativeStatement01.          ManipulativeStatement ::= AlterUserDef              ;
ManipulativeStatement02.          ManipulativeStatement ::= CreateIndexDef            ;
ManipulativeStatement03.          ManipulativeStatement ::= CreateRoleDef             ;
ManipulativeStatement04.          ManipulativeStatement ::= CreateTableDef            ;
ManipulativeStatement05.          ManipulativeStatement ::= CreateUserDef             ;
ManipulativeStatement06.          ManipulativeStatement ::= DeleteStatementPositioned ;
ManipulativeStatement07.          ManipulativeStatement ::= DeleteStatementSearched   ;
ManipulativeStatement08.          ManipulativeStatement ::= DropClusterDef            ;
ManipulativeStatement09.          ManipulativeStatement ::= DropContextDef            ;
ManipulativeStatement10.          ManipulativeStatement ::= DropDatabaseDef           ;
ManipulativeStatement11.          ManipulativeStatement ::= DropDatabaseLinkDef       ;
ManipulativeStatement12.          ManipulativeStatement ::= DropDirectoryDef          ;
ManipulativeStatement13.          ManipulativeStatement ::= DropFunctionDef           ;
ManipulativeStatement14.          ManipulativeStatement ::= DropIndexDef              ;
ManipulativeStatement15.          ManipulativeStatement ::= DropMaterializedViewDef   ;
ManipulativeStatement16.          ManipulativeStatement ::= DropPackageDef            ;
ManipulativeStatement17.          ManipulativeStatement ::= DropProcedureDef          ;
ManipulativeStatement18.          ManipulativeStatement ::= DropProfileDef            ;
ManipulativeStatement19.          ManipulativeStatement ::= DropRoleDef               ;
ManipulativeStatement20.          ManipulativeStatement ::= DropSequenceDef           ;
ManipulativeStatement21.          ManipulativeStatement ::= DropSynonymDef            ;
ManipulativeStatement22.          ManipulativeStatement ::= DropTableDef              ;
ManipulativeStatement23.          ManipulativeStatement ::= DropTablespaceDef         ;
ManipulativeStatement24.          ManipulativeStatement ::= DropTriggerDef            ;
ManipulativeStatement25.          ManipulativeStatement ::= DropTypeDef               ;
ManipulativeStatement26.          ManipulativeStatement ::= DropTypeBodyDef           ;
ManipulativeStatement27.          ManipulativeStatement ::= DropUserDef               ;
ManipulativeStatement28.          ManipulativeStatement ::= DropViewDef               ;
ManipulativeStatement29.          ManipulativeStatement ::= GrantDef                  ;
ManipulativeStatement30.          ManipulativeStatement ::= InsertStatement           ;
ManipulativeStatement31.          ManipulativeStatement ::= RevokeDef                 ;
ManipulativeStatement32.          ManipulativeStatement ::= SelectStatement           ;
ManipulativeStatement33.          ManipulativeStatement ::= TruncateCluster           ;
ManipulativeStatement34.          ManipulativeStatement ::= TruncateTable             ;
ManipulativeStatement35.          ManipulativeStatement ::= UpdateStatementPositioned ;
ManipulativeStatement36.          ManipulativeStatement ::= UpdateStatementSearched   ;
ManipulativeStatement37.          ManipulativeStatement ::= ViewDef                   ;

-- close_statement -> CLOSE cursor : {close, '$2'}.

CloseStatement01.                 CloseStatement ::= "CLOSE" Cursor ;

-- commit_statement -> COMMIT      : 'commit'.
-- commit_statement -> COMMIT WORK : 'commit work'.

CommitStatement01.                CommitStatement ::= "COMMIT"        ;
CommitStatement02.                CommitStatement ::= "COMMIT" "WORK" ;

-- delete_statement_positioned -> DELETE FROM table_dblink WHERE CURRENT OF cursor           : {delete, '$3',{where_current_of, '$7'}, {returning, {}}}.
-- delete_statement_positioned -> DELETE FROM table_dblink WHERE CURRENT OF cursor returning : {delete, '$3',{where_current_of, '$7'}, '$8'}.

DeleteStatementPositioned01.      DeleteStatementPositioned ::= "DELETE" "FROM" TableDblink "WHERE" "CURRENT" "OF" Cursor           ;
DeleteStatementPositioned02.      DeleteStatementPositioned ::= "DELETE" "FROM" TableDblink "WHERE" "CURRENT" "OF" Cursor Returning ;

-- delete_statement_searched -> DELETE FROM table_dblink                        : {delete, '$3', [],   {returning, {}}}.
-- delete_statement_searched -> DELETE FROM table_dblink              returning : {delete, '$3', [],   '$4'}.
-- delete_statement_searched -> DELETE FROM table_dblink where_clause           : {delete, '$3', '$4', {returning, {}}}.
-- delete_statement_searched -> DELETE FROM table_dblink where_clause returning : {delete, '$3', '$4', '$5'}.

DeleteStatementSearched01.        DeleteStatementSearched ::= "DELETE" "FROM" TableDblink                       ;
DeleteStatementSearched02.        DeleteStatementSearched ::= "DELETE" "FROM" TableDblink WhereClause           ;
DeleteStatementSearched03.        DeleteStatementSearched ::= "DELETE" "FROM" TableDblink             Returning ;
DeleteStatementSearched04.        DeleteStatementSearched ::= "DELETE" "FROM" TableDblink WhereClause Returning ;

-- drop_cluster_def -> DROP CLUSTER cluster_name                         : {'drop cluster', '$3', {}}.
-- drop_cluster_def -> DROP CLUSTER cluster_name drop_cluster_extensions : {'drop cluster', '$3', '$4'}.

DropClusterDef01.                 DropClusterDef ::= "DROP" "CLUSTER" ClusterName                       ;
DropClusterDef02.                 DropClusterDef ::= "DROP" "CLUSTER" ClusterName DropClusterExtensions ;

-- drop_cluster_extensions -> INCLUDING TABLES                     : {'including tables'}.
-- drop_cluster_extensions -> INCLUDING TABLES CASCADE CONSTRAINTS : {'including tables cascade constraints'}.

DropClusterExtensions01.          DropClusterExtensions ::= "INCLUDING" "TABLES"                         ;
DropClusterExtensions02.          DropClusterExtensions ::= "INCLUDING" "TABLES" "CASCADE" "CONSTRAINTS" ;

-- cluster_name ->                identifier : '$1'.
-- cluster_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

ClusterName01.                    ClusterName ::=                Identifier ;
ClusterName02.                    ClusterName ::= Identifier "." Identifier ;

-- drop_context_def -> DROP CONTEXT identifier : {'drop context', '$3'}.

DropContextDef01.                 DropContextDef ::= "DROP" "CONTEXT" Identifier ;

-- drop_database_def -> DROP DATABASE : {'drop database'}.

DropDatabaseDef01.                DropDatabaseDef ::= "DROP" "DATABASE" ;

-- drop_database_link_def -> DROP        DATABASE LINK DBLINK : {'drop database link', unwrap_bin('$4'), {}}.
-- drop_database_link_def -> DROP PUBLIC DATABASE LINK DBLINK : {'drop database link', unwrap_bin('$5'), public}.

DropDatabaseLinkDef01.            DropDatabaseLinkDef ::= "DROP"          "DATABASE" "LINK" "DBLINK" ;
DropDatabaseLinkDef02.            DropDatabaseLinkDef ::= "DROP" "PUBLIC" "DATABASE" "LINK" "DBLINK" ;

-- drop_directory_def -> DROP DIRECTORY identifier : {'drop directory', '$3'}.

DropDirectoryDef01.               DropDirectoryDef ::= "DROP" "DIRECTORY" Identifier ;

-- drop_function_def -> DROP FUNCTION function_name : {'drop function', '$3'}.

DropFunctionDef01.                DropFunctionDef ::= "DROP" "FUNCTION" FunctionName ;

-- function_name ->                NAME : unwrap_bin('$1').
-- function_name -> identifier '.' NAME : list_to_binary(['$1',".",unwrap_bin('$3')]).

FunctionName01.                   FunctionName ::=                "NAME" ;
FunctionName02.                   FunctionName ::= Identifier "." "NAME" ;

-- drop_index_def -> DROP INDEX            FROM table                       : {'drop index', {},   '$4'}.
-- drop_index_def -> DROP INDEX            FROM table drop_index_extensions : {'drop index', {},   '$4', '$5'}.
-- drop_index_def -> DROP INDEX index_name                                  : {'drop index', '$3', []}.
-- drop_index_def -> DROP INDEX index_name            drop_index_extensions : {'drop index', '$3', [],   '$4'}.
-- drop_index_def -> DROP INDEX index_name FROM table                       : {'drop index', '$3', '$5'}.
-- drop_index_def -> DROP INDEX index_name FROM table drop_index_extensions : {'drop index', '$3', '$5', '$6'}.

DropIndexDef01.                   DropIndexDef ::= "DROP" "INDEX"           "FROM" Table                     ;
DropIndexDef02.                   DropIndexDef ::= "DROP" "INDEX"           "FROM" Table DropIndexExtensions ;
DropIndexDef03.                   DropIndexDef ::= "DROP" "INDEX" IndexName                                  ;
DropIndexDef04.                   DropIndexDef ::= "DROP" "INDEX" IndexName              DropIndexExtensions ;
DropIndexDef05.                   DropIndexDef ::= "DROP" "INDEX" IndexName "FROM" Table                     ;
DropIndexDef06.                   DropIndexDef ::= "DROP" "INDEX" IndexName "FROM" Table DropIndexExtensions ;

-- drop_index_extensions ->              DEFERRED  INVALIDATION : {'deferred invalidation'}.
-- drop_index_extensions ->              IMMEDIATE INVALIDATION : {'immediate invalidation'}.
-- drop_index_extensions ->        FORCE                        : {'force'}.
-- drop_index_extensions ->        FORCE DEFERRED  INVALIDATION : {'force deferred invalidation'}.
-- drop_index_extensions ->        FORCE IMMEDIATE INVALIDATION : {'force immediate invalidation'}.
-- drop_index_extensions -> ONLINE                              : {'online'}.
-- drop_index_extensions -> ONLINE       DEFERRED  INVALIDATION : {'online deferred invalidation'}.
-- drop_index_extensions -> ONLINE       IMMEDIATE INVALIDATION : {'online immediate invalidation'}.
-- drop_index_extensions -> ONLINE FORCE                        : {'online force'}.
-- drop_index_extensions -> ONLINE FORCE DEFERRED  INVALIDATION : {'online force deferred invalidation'}.
-- drop_index_extensions -> ONLINE FORCE IMMEDIATE INVALIDATION : {'online force immediate invalidation'}.

DropIndexExtensions01.            DropIndexExtensions ::=                  "DEFERRED"  "INVALIDATION" ;
DropIndexExtensions02.            DropIndexExtensions ::=                  "IMMEDIATE" "INVALIDATION" ;
DropIndexExtensions03.            DropIndexExtensions ::=          "FORCE"                            ;
DropIndexExtensions04.            DropIndexExtensions ::=          "FORCE" "DEFERRED"  "INVALIDATION" ;
DropIndexExtensions05.            DropIndexExtensions ::=          "FORCE" "IMMEDIATE" "INVALIDATION" ;
DropIndexExtensions06.            DropIndexExtensions ::= "ONLINE"                                    ;
DropIndexExtensions07.            DropIndexExtensions ::= "ONLINE"         "DEFERRED"  "INVALIDATION" ;
DropIndexExtensions08.            DropIndexExtensions ::= "ONLINE"         "IMMEDIATE" "INVALIDATION" ;
DropIndexExtensions09.            DropIndexExtensions ::= "ONLINE" "FORCE"                            ;
DropIndexExtensions10.            DropIndexExtensions ::= "ONLINE" "FORCE" "DEFERRED"  "INVALIDATION" ;
DropIndexExtensions11.            DropIndexExtensions ::= "ONLINE" "FORCE" "IMMEDIATE" "INVALIDATION" ;

-- drop_materialized_view_def -> DROP MATERIALIZED VIEW materialized_view_name                : {'drop materialized view', '$4', {}}.
-- drop_materialized_view_def -> DROP MATERIALIZED VIEW materialized_view_name PRESERVE TABLE : {'drop materialized view', '$4', 'preserve table'}.

DropMaterializedViewDef01.        DropMaterializedViewDef ::= "DROP" "MATERIALIZED" "VIEW" MaterializedViewName                    ;
DropMaterializedViewDef02.        DropMaterializedViewDef ::= "DROP" "MATERIALIZED" "VIEW" MaterializedViewName "PRESERVE" "TABLE" ;

-- materialized_view_name ->                identifier : '$1'.
-- materialized_view_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

MaterializedViewName01.           MaterializedViewName ::=                Identifier ;
MaterializedViewName02.           MaterializedViewName ::= Identifier "." Identifier ;

-- drop_package_def -> DROP PACKAGE      package_name : {'drop package', '$3', {}}.
-- drop_package_def -> DROP PACKAGE BODY package_name : {'drop package', '$4', body}.

DropPackageDef01.                 DropPackageDef ::= "DROP" "PACKAGE" "BODY" PackageName ;

-- package_name ->                identifier : '$1'.
-- package_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

PackageName01.                    PackageName ::=                Identifier ;
PackageName02.                    PackageName ::= Identifier "." Identifier ;

-- drop_procedure_def -> DROP PROCEDURE procedure_name : {'drop procedure', '$3'}.

DropProcedureDef01.               DropProcedureDef ::= "DROP" "PROCEDURE" ProcedureName ;

-- procedure_name ->                identifier : '$1'.
-- procedure_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

ProcedureName01.                  ProcedureName ::=                Identifier ;
ProcedureName02.                  ProcedureName ::= Identifier "." Identifier ;

-- drop_profile_def -> DROP PROFILE identifier         : {'drop profile', '$3', {}}.
-- drop_profile_def -> DROP PROFILE identifier CASCADE : {'drop profile', '$3', cascade}.

DropProfileDef01.                 DropProfileDef ::= "DROP" "PROFILE" Identifier           ;
DropProfileDef02.                 DropProfileDef ::= "DROP" "PROFILE" Identifier "CASCADE" ;

-- drop_role_def -> DROP ROLE identifier : {'drop role', '$3'}.

DropRoleDef01.                    DropRoleDef ::= "DROP" "ROLE" Identifier ;

-- drop_sequence_def -> DROP SEQUENCE sequence_name : {'drop sequence', '$3'}.

DropSequenceDef01.                DropSequenceDef ::= "DROP" "SEQUENCE" SequenceName ;

-- sequence_name ->                identifier : '$1'.
-- sequence_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

SequenceName01.                   SequenceName ::=                Identifier ;
SequenceName02.                   SequenceName ::= Identifier "." Identifier ;

-- drop_synonym_def -> DROP        SYNONYM synonym_name       : {'drop synonym', '$3', {},     {}}.
-- drop_synonym_def -> DROP        SYNONYM synonym_name FORCE : {'drop synonym', '$3', {},     force}.
-- drop_synonym_def -> DROP PUBLIC SYNONYM synonym_name       : {'drop synonym', '$4', public, {}}.
-- drop_synonym_def -> DROP PUBLIC SYNONYM synonym_name FORCE : {'drop synonym', '$4', public, force}.

DropSynonymDef01.                 DropSynonymDef ::= "DROP"          "SYNONYM" SynonymName         ;
DropSynonymDef02.                 DropSynonymDef ::= "DROP"          "SYNONYM" SynonymName "FORCE" ;
DropSynonymDef03.                 DropSynonymDef ::= "DROP" "PUBLIC" "SYNONYM" SynonymName         ;
DropSynonymDef04.                 DropSynonymDef ::= "DROP" "PUBLIC" "SYNONYM" SynonymName "FORCE" ;

-- synonym_name ->                identifier : '$1'.
-- synonym_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

SynonymName01.                    SynonymName ::=                Identifier ;
SynonymName02.                    SynonymName ::= Identifier "." Identifier ;

-- drop_table_def -> DROP            TABLE        table_list                       : {'drop table', {'tables', '$3'}, {},   {},   []}.
-- drop_table_def -> DROP            TABLE        table_list drop_table_extensions : {'drop table', {'tables', '$3'}, {},   '$4', []}.
-- drop_table_def -> DROP            TABLE exists table_list                       : {'drop table', {'tables', '$4'}, '$3', {},   []}.
-- drop_table_def -> DROP            TABLE exists table_list drop_table_extensions : {'drop table', {'tables', '$4'}, '$3', '$5', []}.
-- drop_table_def -> DROP identifier TABLE        table_list                       : {'drop table', {'tables', '$4'}, {},   {},   binary_to_list('$2')}.
-- drop_table_def -> DROP identifier TABLE        table_list drop_table_extensions : {'drop table', {'tables', '$4'}, {},   '$5', binary_to_list('$2')}.
-- drop_table_def -> DROP identifier TABLE exists table_list                       : {'drop table', {'tables', '$5'}, '$4', {},   binary_to_list('$2')}.
-- drop_table_def -> DROP identifier TABLE exists table_list drop_table_extensions : {'drop table', {'tables', '$5'}, '$4', '$6', binary_to_list('$2')}.

DropTableDef01.                   DropTableDef ::= "DROP"            "TABLE"        TableList                     ;
DropTableDef02.                   DropTableDef ::= "DROP"            "TABLE"        TableList DropTableExtensions ;
DropTableDef03.                   DropTableDef ::= "DROP"            "TABLE" Exists TableList                     ;
DropTableDef04.                   DropTableDef ::= "DROP"            "TABLE" Exists TableList DropTableExtensions ;
DropTableDef05.                   DropTableDef ::= "DROP" Identifier "TABLE"        TableList                     ;
DropTableDef06.                   DropTableDef ::= "DROP" Identifier "TABLE"        TableList DropTableExtensions ;
DropTableDef07.                   DropTableDef ::= "DROP" Identifier "TABLE" Exists TableList                     ;
DropTableDef08.                   DropTableDef ::= "DROP" Identifier "TABLE" Exists TableList DropTableExtensions ;

-- drop_table_extensions ->                     PURGE : {'purge'}.
-- drop_table_extensions -> CASCADE CONSTRAINTS       : {'cascade constraints'}.
-- drop_table_extensions -> CASCADE CONSTRAINTS PURGE : {'cascade constraints purge'}.

DropTableExtensions01.            DropTableExtensions ::=                         "PURGE" ;
DropTableExtensions02.            DropTableExtensions ::= "CASCADE" "CONSTRAINTS"         ;
DropTableExtensions03.            DropTableExtensions ::= "CASCADE" "CONSTRAINTS" "PURGE" ;

-- drop_tablespace_def -> DROP TABLESPACE identifier                            : {'drop tablespace', '$3', {}}.
-- drop_tablespace_def -> DROP TABLESPACE identifier drop_tablespace_extensions : {'drop tablespace', '$3', '$4'}.

DropTablespaceDef01.              DropTablespaceDef ::= "DROP" "TABLESPACE" Identifier                          ;
DropTablespaceDef02.              DropTablespaceDef ::= "DROP" "TABLESPACE" Identifier DropTablespaceExtensions ;

-- drop_tablespace_extensions ->            INCLUDING CONTENTS                                    : {'including contents'}.
-- drop_tablespace_extensions ->            INCLUDING CONTENTS                CASCADE CONSTRAINTS : {'including contents cascade constraints'}.
-- drop_tablespace_extensions ->            INCLUDING CONTENTS AND  DATAFILES CASCADE CONSTRAINTS : {'including contents and datafiles cascade constraints'}.
-- drop_tablespace_extensions ->            INCLUDING CONTENTS KEEP DATAFILES CASCADE CONSTRAINTS : {'including contents keep datafiles cascade constraints'}.
-- drop_tablespace_extensions -> DROP QUOTA                                                       : {'drop quota'}.
-- drop_tablespace_extensions -> DROP QUOTA INCLUDING CONTENTS                                    : {'drop quota including contents'}.
-- drop_tablespace_extensions -> DROP QUOTA INCLUDING CONTENTS                CASCADE CONSTRAINTS : {'drop quota including contents cascade constraints'}.
-- drop_tablespace_extensions -> DROP QUOTA INCLUDING CONTENTS AND  DATAFILES CASCADE CONSTRAINTS : {'drop quota including contents and datafiles cascade constraints'}.
-- drop_tablespace_extensions -> DROP QUOTA INCLUDING CONTENTS KEEP DATAFILES CASCADE CONSTRAINTS : {'drop quota including contents keep datafiles cascade constraints'}.
-- drop_tablespace_extensions -> KEEP QUOTA                                                       : {'keep quota'}.
-- drop_tablespace_extensions -> KEEP QUOTA INCLUDING CONTENTS                                    : {'keep quota including contents'}.
-- drop_tablespace_extensions -> KEEP QUOTA INCLUDING CONTENTS                CASCADE CONSTRAINTS : {'keep quota including contents cascade constraints'}.
-- drop_tablespace_extensions -> KEEP QUOTA INCLUDING CONTENTS AND  DATAFILES CASCADE CONSTRAINTS : {'keep quota including contents and datafiles cascade constraints'}.
-- drop_tablespace_extensions -> KEEP QUOTA INCLUDING CONTENTS KEEP DATAFILES CASCADE CONSTRAINTS : {'keep quota including contents keep datafiles cascade constraints'}.

DropTablespaceExtensions01.       DropTablespaceExtensions ::=                "INCLUDING" "CONTENTS"                                            ;
DropTablespaceExtensions02.       DropTablespaceExtensions ::=                "INCLUDING" "CONTENTS"                    "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions03.       DropTablespaceExtensions ::=                "INCLUDING" "CONTENTS" "AND"  "DATAFILES" "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions04.       DropTablespaceExtensions ::=                "INCLUDING" "CONTENTS" "KEEP" "DATAFILES" "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions05.       DropTablespaceExtensions ::= "DROP" "QUOTA"                                                                   ;
DropTablespaceExtensions06.       DropTablespaceExtensions ::= "DROP" "QUOTA" "INCLUDING" "CONTENTS"                                            ;
DropTablespaceExtensions07.       DropTablespaceExtensions ::= "DROP" "QUOTA" "INCLUDING" "CONTENTS"                    "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions08.       DropTablespaceExtensions ::= "DROP" "QUOTA" "INCLUDING" "CONTENTS" "AND"  "DATAFILES" "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions09.       DropTablespaceExtensions ::= "DROP" "QUOTA" "INCLUDING" "CONTENTS" "KEEP" "DATAFILES" "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions10.       DropTablespaceExtensions ::= "KEEP" "QUOTA"                                                                   ;
DropTablespaceExtensions11.       DropTablespaceExtensions ::= "KEEP" "QUOTA" "INCLUDING" "CONTENTS"                                            ;
DropTablespaceExtensions12.       DropTablespaceExtensions ::= "KEEP" "QUOTA" "INCLUDING" "CONTENTS"                    "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions13.       DropTablespaceExtensions ::= "KEEP" "QUOTA" "INCLUDING" "CONTENTS" "AND"  "DATAFILES" "CASCADE" "CONSTRAINTS" ;
DropTablespaceExtensions14.       DropTablespaceExtensions ::= "KEEP" "QUOTA" "INCLUDING" "CONTENTS" "KEEP" "DATAFILES" "CASCADE" "CONSTRAINTS" ;

-- drop_trigger_def -> DROP TRIGGER trigger_name : {'drop trigger', '$3'}.

DropTriggerDef01.                 DropTriggerDef ::= "DROP" "TRIGGER" TriggerName ;

-- trigger_name ->                identifier : '$1'.
-- trigger_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

TriggerName01.                    TriggerName ::=                Identifier ;
TriggerName02.                    TriggerName ::= Identifier "." Identifier ;

-- drop_type_def -> DROP TYPE type_name          : {'drop type', '$3', {}}.
-- drop_type_def -> DROP TYPE type_name FORCE    : {'drop type', '$3', force}.
-- drop_type_def -> DROP TYPE type_name VALIDATE : {'drop type', '$3', validate}.

DropTypeDef01.                    DropTypeDef ::= "DROP" "TYPE" TypeName            ;
DropTypeDef02.                    DropTypeDef ::= "DROP" "TYPE" TypeName "FORCE"    ;
DropTypeDef03.                    DropTypeDef ::= "DROP" "TYPE" TypeName "VALIDATE" ;

-- type_name ->                identifier : '$1'.
-- type_name -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).

TypeName01.                       TypeName ::=                Identifier ;
TypeName02.                       TypeName ::= Identifier "." Identifier ;

-- drop_type_body_def -> DROP TYPE BODY type_name : {'drop type body', '$4'}.

DropTypeBodyDef01.                DropTypeBodyDef ::= "DROP" "TYPE" "BODY" TypeName ;

-- drop_user_def -> DROP USER identifier         : {'drop user', '$3', []}.
-- drop_user_def -> DROP USER identifier CASCADE : {'drop user', '$3', ['cascade']}.

DropUserDef01.                    DropUserDef ::= "DROP" "USER" Identifier           ;
DropUserDef02.                    DropUserDef ::= "DROP" "USER" Identifier "CASCADE" ;

-- drop_view_def -> DROP VIEW table                     : {'drop view', '$3', {}}.
-- drop_view_def -> DROP VIEW table CASCADE CONSTRAINTS : {'drop view', '$3', 'cascade constraints'}.

DropViewDef01.                    DropViewDef ::= "DROP" "VIEW" Table "CASCADE" "CONSTRAINTS" ;

-- fetch_statement -> FETCH cursor INTO target_commalist : {fetch, '$2', {into, '$4'}}.

FetchStatement01.                 FetchStatement ::= "FETCH" Cursor "INTO" TargetCommalist ;

-- insert_statement -> INSERT INTO table_dblink                                                         : {insert, '$3', {},           {},   {returning, {}}}.
-- insert_statement -> INSERT INTO table_dblink                                               returning : {insert, '$3', {},           {},   '$4'}.
-- insert_statement -> INSERT INTO table_dblink                          values_or_query_spec           : {insert, '$3', {cols, []},   '$4', {returning, {}}}.
-- insert_statement -> INSERT INTO table_dblink                          values_or_query_spec returning : {insert, '$3', {cols, []},   '$4', '$5'}.
-- insert_statement -> INSERT INTO table_dblink '(' column_commalist ')' values_or_query_spec           : {insert, '$3', {cols, '$5'}, '$7', {returning, {}}}.
-- insert_statement -> INSERT INTO table_dblink '(' column_commalist ')' values_or_query_spec returning : {insert, '$3', {cols, '$5'}, '$7', '$8'}.

InsertStatement01.                InsertStatement ::= "INSERT" "INTO" TableDblink                                                     ;
InsertStatement02.                InsertStatement ::= "INSERT" "INTO" TableDblink                                           Returning ;
InsertStatement03.                InsertStatement ::= "INSERT" "INTO" TableDblink                         ValuesOrQuerySpec           ;
InsertStatement04.                InsertStatement ::= "INSERT" "INTO" TableDblink                         ValuesOrQuerySpec Returning ;
InsertStatement05.                InsertStatement ::= "INSERT" "INTO" TableDblink "(" ColumnCommalist ")" ValuesOrQuerySpec           ;
InsertStatement06.                InsertStatement ::= "INSERT" "INTO" TableDblink "(" ColumnCommalist ")" ValuesOrQuerySpec Returning ;

-- values_or_query_spec -> VALUES '(' insert_atom_commalist ')' : {values, '$3'}.
-- values_or_query_spec ->     query_spec                       : '$1'.
-- values_or_query_spec -> '(' query_spec ')'                   : '$2'.

ValuesOrQuerySpec01.              ValuesOrQuerySpec ::= "VALUES" "(" InsertAtomCommalist ")" ;
ValuesOrQuerySpec02.              ValuesOrQuerySpec ::=     QuerySpec                        ;
ValuesOrQuerySpec03.              ValuesOrQuerySpec ::= "(" QuerySpec ")"                    ;

-- insert_atom_commalist ->                           insert_atom :         ['$1'].
-- insert_atom_commalist -> insert_atom_commalist ',' insert_atom : '$1' ++ ['$3'].

InsertAtomCommalist01.            InsertAtomCommalist ::=                         InsertAtom ;
InsertAtomCommalist02.            InsertAtomCommalist ::= InsertAtomCommalist "," InsertAtom ;

-- insert_atom -> scalar_opt_as_exp : '$1'.

InsertAtom01.                     InsertAtom ::= ScalarOptAsExp ;

-- open_statement -> OPEN cursor : {open, '$2'}.

OpenStatement01.                  OpenStatement ::= "OPEN" Cursor ;

-- rollback_statement -> ROLLBACK      : 'rollback'.
-- rollback_statement -> ROLLBACK WORK : 'rollback work'.

RollbackStatement01.              RollbackStatement ::= "ROLLBACK"        ;
RollbackStatement02.              RollbackStatement ::= "ROLLBACK" "WORK" ;

-- select_statement -> query_exp : '$1'.

SelectStatement01.                SelectStatement ::= QueryExp ;

-- hint -> HINT : {hints, unwrap_bin('$1')}.

Hint01.                           Hint ::= "HINT"   ;

-- all_distinct -> ALL      : {opt, <<"all">>}.
-- all_distinct -> DISTINCT : {opt, <<"distinct">>}.

AllDistinct01.                    AllDistinct ::= "ALL"      ;
AllDistinct02.                    AllDistinct ::= "DISTINCT" ;

-- truncate_cluster -> TRUNCATE CLUSTER cluster_name         : {'truncate cluster', '$3', {}}.
-- truncate_cluster -> TRUNCATE CLUSTER cluster_name storage : {'truncate cluster', '$3', '$4'}.

TruncateCluster01.                TruncateCluster ::= "TRUNCATE" "CLUSTER" ClusterName Storage ;

-- truncate_table -> TRUNCATE TABLE table                              : {'truncate table', '$3', {},   {}}.
-- truncate_table -> TRUNCATE TABLE table                      CASCADE : {'truncate table', '$3', {},   {},   cascade}.
-- truncate_table -> TRUNCATE TABLE table              storage         : {'truncate table', '$3', {},   '$4'}.
-- truncate_table -> TRUNCATE TABLE table              storage CASCADE : {'truncate table', '$3', {},   '$4', cascade}.
-- truncate_table -> TRUNCATE TABLE table materialized                 : {'truncate table', '$3', '$4', {}}.
-- truncate_table -> TRUNCATE TABLE table materialized         CASCADE : {'truncate table', '$3', '$4', {},   cascade}.
-- truncate_table -> TRUNCATE TABLE table materialized storage         : {'truncate table', '$3', '$4', '$5'}.
-- truncate_table -> TRUNCATE TABLE table materialized storage CASCADE : {'truncate table', '$3', '$4', '$5', cascade}.

TruncateTable01.                  TruncateTable ::= "TRUNCATE" "TABLE" Table                                ;
TruncateTable02.                  TruncateTable ::= "TRUNCATE" "TABLE" Table                      "CASCADE" ;
TruncateTable03.                  TruncateTable ::= "TRUNCATE" "TABLE" Table              Storage           ;
TruncateTable04.                  TruncateTable ::= "TRUNCATE" "TABLE" Table              Storage "CASCADE" ;
TruncateTable05.                  TruncateTable ::= "TRUNCATE" "TABLE" Table Materialized                   ;
TruncateTable06.                  TruncateTable ::= "TRUNCATE" "TABLE" Table Materialized         "CASCADE" ;
TruncateTable07.                  TruncateTable ::= "TRUNCATE" "TABLE" Table Materialized Storage           ;
TruncateTable08.                  TruncateTable ::= "TRUNCATE" "TABLE" Table Materialized Storage "CASCADE" ;

-- materialized -> PRESERVE MATERIALIZED VIEW LOG : {'materialized view log', preserve}.
-- materialized -> PURGE    MATERIALIZED VIEW LOG : {'materialized view log', purge}.

Materialized01.                   Materialized ::= "PRESERVE" "MATERIALIZED" "VIEW" "LOG" ;
Materialized02.                   Materialized ::= "PURGE"    "MATERIALIZED" "VIEW" "LOG" ;

-- storage ->  DROP      STORAGE : {storage, drop}.
-- storage ->  DROP  ALL STORAGE : {storage, 'drop all'}.
-- storage ->  REUSE     STORAGE : {storage, reuse}.

Storage01.                        Storage ::=  "DROP"        "STORAGE" ;
Storage02.                        Storage ::=  "DROP"  "ALL" "STORAGE" ;
Storage03.                        Storage ::=  "REUSE"       "STORAGE" ;

-- update_statement_positioned -> UPDATE table_dblink SET assignment_commalist WHERE CURRENT OF cursor           : {update, '$2', {set, '$4'}, {where_current_of, '$8'}, {returning, {}}}.
-- update_statement_positioned -> UPDATE table_dblink SET assignment_commalist WHERE CURRENT OF cursor returning : {update, '$2', {set, '$4'}, {where_current_of, '$8'}, '$9'}.

UpdateStatementPositioned01.      UpdateStatementPositioned ::= "UPDATE" TableDblink "SET" AssignmentCommalist "WHERE" "CURRENT" "OF" Cursor           ;
UpdateStatementPositioned02.      UpdateStatementPositioned ::= "UPDATE" TableDblink "SET" AssignmentCommalist "WHERE" "CURRENT" "OF" Cursor Returning ;

-- assignment_commalist ->                          assignment :         ['$1'].
-- assignment_commalist -> assignment_commalist ',' assignment : '$1' ++ ['$3'].

AssignmentCommalist01.            AssignmentCommalist ::=                         Assignment ;
AssignmentCommalist02.            AssignmentCommalist ::= AssignmentCommalist "," Assignment ;

-- assignment -> column '=' scalar_opt_as_exp : {'=', '$1', '$3'}.

Assignment01.                     Assignment ::= Column "=" ScalarOptAsExp ;

-- update_statement_searched -> UPDATE table_dblink SET assignment_commalist                        : {update, '$2', {set, '$4'}, [],   {returning, {}}}.
-- update_statement_searched -> UPDATE table_dblink SET assignment_commalist              returning : {update, '$2', {set, '$4'}, [],   '$5'}.
-- update_statement_searched -> UPDATE table_dblink SET assignment_commalist where_clause           : {update, '$2', {set, '$4'}, '$5', {returning, {}}}.
-- update_statement_searched -> UPDATE table_dblink SET assignment_commalist where_clause returning : {update, '$2', {set, '$4'}, '$5', '$6'}.

UpdateStatementSearched01.        UpdateStatementSearched ::= "UPDATE" TableDblink "SET" AssignmentCommalist                       ;
UpdateStatementSearched02.        UpdateStatementSearched ::= "UPDATE" TableDblink "SET" AssignmentCommalist WhereClause           ;
UpdateStatementSearched03.        UpdateStatementSearched ::= "UPDATE" TableDblink "SET" AssignmentCommalist             Returning ;
UpdateStatementSearched04.        UpdateStatementSearched ::= "UPDATE" TableDblink "SET" AssignmentCommalist WhereClause Returning ;

-- target_commalist ->                      target :         ['$1'].
-- target_commalist -> target_commalist ',' target : '$1' ++ ['$3'].

TargetCommalist01.                TargetCommalist ::=                     Target ;
TargetCommalist02.                TargetCommalist ::= TargetCommalist "," Target ;

-- target -> identifier    : '$1'.
-- target -> parameter_ref : '$1'.

Target01.                         Target ::= Identifier   ;
Target02.                         Target ::= ParameterRef ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- query expressions
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- query_exp ->                     query_term : '$1'.
-- query_exp -> query_exp UNION     query_term : {union,       '$1', '$3'}.
-- query_exp -> query_exp UNION ALL query_term : {'union all', '$1', '$4'}.
-- query_exp -> query_exp INTERSECT query_term : {intersect,   '$1', '$3'}.
-- query_exp -> query_exp MINUS     query_term : {minus,       '$1', '$3'}.

QueryExp01.                       QueryExp ::=                        QueryTerm ;
QueryExp02.                       QueryExp ::= QueryExp "UNION"       QueryTerm ;
QueryExp03.                       QueryExp ::= QueryExp "UNION" "ALL" QueryTerm ;
QueryExp04.                       QueryExp ::= QueryExp "INTERSECT"   QueryTerm ;
QueryExp05.                       QueryExp ::= QueryExp "MINUS"       QueryTerm ;

-- returning -> RETURNING selection INTO selection : {returning, '$2', '$4'}.
-- returning -> RETURN    selection INTO selection : {return,    '$2', '$4'}.

Returning01.                      Returning ::= "RETURNING" Selection "INTO" Selection ;
Returning02.                      Returning ::= "RETURN"    Selection "INTO" Selection ;

-- query_term ->     query_spec          : '$1'.
-- query_term -> '(' query_exp  ')'      : '$2'.
-- query_term -> '(' query_exp  ')' JSON : {'$2', jpparse(list_to_binary([unwrap('$4')])), '('}.

QueryTerm01.                      QueryTerm ::=     QuerySpec            ;
QueryTerm02.                      QueryTerm ::= "(" QueryExp  ")"        ;
QueryTerm03.                      QueryTerm ::= "(" QueryExp  ")" "JSON" ;

-- query_spec -> SELECT                   selection      table_exp : {select,
--                                                                    [{fields, '$2'}] ++
--                                                                    '$3'}.
-- query_spec -> SELECT                   selection into table_exp : {select,
--                                                                    [{fields, '$2'}] ++
--                                                                    if '$3' == {} -> []; true -> [{into, '$3'}] end ++
--                                                                    '$4'}.
-- query_spec -> SELECT      all_distinct selection      table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    [{fields, '$3'}] ++
--                                                                    '$4'}.
-- query_spec -> SELECT      all_distinct selection into table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    [{fields, '$3'}] ++
--                                                                    if '$4' == {} -> []; true -> [{into, '$4'}] end ++
--                                                                    '$5'}.
-- query_spec -> SELECT hint              selection      table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    [{fields, '$3'}] ++
--                                                                    '$4'}.
-- query_spec -> SELECT hint              selection into table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    [{fields, '$3'}] ++
--                                                                    if '$4' == {} -> []; true -> [{into, '$4'}] end ++
--                                                                    '$5'}.
-- query_spec -> SELECT hint all_distinct selection      table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    if '$3' == {} -> []; true -> ['$3'] end ++
--                                                                    [{fields, '$4'}] ++
--                                                                    '$5'}.
-- query_spec -> SELECT hint all_distinct selection into table_exp : {select,
--                                                                    if '$2' == {} -> []; true -> ['$2'] end ++
--                                                                    if '$3' == {} -> []; true -> ['$3'] end ++
--                                                                    [{fields, '$4'}] ++
--                                                                    if '$5' == {} -> []; true -> [{into, '$5'}] end ++
--                                                                    '$6'}.

QuerySpec01.                      QuerySpec ::= "SELECT"                  Selection      TableExp ;
QuerySpec02.                      QuerySpec ::= "SELECT"                  Selection Into TableExp ;
QuerySpec03.                      QuerySpec ::= "SELECT"      AllDistinct Selection      TableExp ;
QuerySpec04.                      QuerySpec ::= "SELECT"      AllDistinct Selection Into TableExp ;
QuerySpec05.                      QuerySpec ::= "SELECT" Hint             Selection      TableExp ;
QuerySpec06.                      QuerySpec ::= "SELECT" Hint             Selection Into TableExp ;
QuerySpec07.                      QuerySpec ::= "SELECT" Hint AllDistinct Selection      TableExp ;
QuerySpec08.                      QuerySpec ::= "SELECT" Hint AllDistinct Selection Into TableExp ;

-- into -> INTO target_commalist : '$2'.

Into01.                           Into ::= "INTO" TargetCommalist ;

-- selection -> select_field_commalist : '$1'.

Selection01.                      Selection ::= SelectFieldCommalist ;

-- select_field -> case_when_opt_as_exp : ['$1'].
-- select_field -> scalar_opt_as_exp    : ['$1'].
-- select_field -> '*'                  : [<<"*">>].

SelectField01.                    SelectField ::= CaseWhenOptAsExp ;
SelectField02.                    SelectField ::= ScalarOptAsExp   ;
SelectField03.                    SelectField ::= "*"              ;

-- select_field_commalist ->                            select_field :         '$1'.
-- select_field_commalist -> select_field_commalist ',' select_field : '$1' ++ '$3'.

SelectFieldCommalist01.           SelectFieldCommalist ::=                          SelectField ;
SelectFieldCommalist02.           SelectFieldCommalist ::= SelectFieldCommalist "," SelectField ;

-- case_when_opt_as_exp -> case_when_exp         : '$1'.
-- case_when_opt_as_exp -> case_when_exp    NAME : {as, '$1', unwrap_bin('$2')}.
-- case_when_opt_as_exp -> case_when_exp AS NAME : {as, '$1', unwrap_bin('$3')}.

CaseWhenOptAsExp01.               CaseWhenOptAsExp ::= CaseWhenExp             ;
CaseWhenOptAsExp02.               CaseWhenOptAsExp ::= CaseWhenExp      "NAME" ;
CaseWhenOptAsExp03.               CaseWhenOptAsExp ::= CaseWhenExp "AS" "NAME" ;

-- case_when_exp -> CASE                   case_when_then_list      END : {'case', <<>>, '$2', {}}.
-- case_when_exp -> CASE                   case_when_then_list else END : {'case', <<>>, '$2', '$3'}.
-- case_when_exp -> CASE scalar_opt_as_exp case_when_then_list      END : {'case', '$2', '$3', {}}.
-- case_when_exp -> CASE scalar_opt_as_exp case_when_then_list else END : {'case', '$2', '$3', '$4'}.
-- case_when_exp -> '(' case_when_exp ')'                               : '$2'.

CaseWhenExp01.                    CaseWhenExp ::= "CASE"                CaseWhenThenList      "END" ;
CaseWhenExp02.                    CaseWhenExp ::= "CASE"                CaseWhenThenList Else "END" ;
CaseWhenExp03.                    CaseWhenExp ::= "CASE" ScalarOptAsExp CaseWhenThenList      "END" ;
CaseWhenExp04.                    CaseWhenExp ::= "CASE" ScalarOptAsExp CaseWhenThenList Else "END" ;
CaseWhenExp05.                    CaseWhenExp ::= "(" CaseWhenExp ")"                                  ;

-- case_when_then_list -> case_when_then                     : ['$1'].
-- case_when_then_list -> case_when_then case_when_then_list : ['$1'|'$2'].

CaseWhenThenList01.               CaseWhenThenList ::= CaseWhenThen                  ;
CaseWhenThenList02.               CaseWhenThenList ::= CaseWhenThen CaseWhenThenList ;

-- case_when_then -> WHEN search_condition THEN scalar_opt_as_exp : {'$2', '$4'}.

CaseWhenThen01.                   CaseWhenThen ::= "WHEN" SearchCondition "THEN" ScalarOptAsExp ;

-- else -> ELSE scalar_opt_as_exp : '$2'.

Else01.                           Else ::= "ELSE" ScalarOptAsExp ;

-- table_exp -> from_clause                                                                                      : ['$1', {where, {}}, {'hierarchical query', {}}, {'group by', []},  {having, {}}, {'order by', []}].
-- table_exp -> from_clause                                                                      order_by_clause : ['$1', {where, {}}, {'hierarchical query', {}}, {'group by', []},  {having, {}}, '$2'].
-- table_exp -> from_clause                                                        having_clause                 : ['$1', {where, {}}, {'hierarchical query', {}}, {'group by', []},  '$2',         {'order by', []}].
-- table_exp -> from_clause                                                        having_clause order_by_clause : ['$1', {where, {}}, {'hierarchical query', {}}, {'group by', []},  '$2',         '$3'].
-- table_exp -> from_clause                                        group_by_clause                               : ['$1', {where, {}}, {'hierarchical query', {}}, '$2',              {having, {}}, {'order by', []}].
-- table_exp -> from_clause                                        group_by_clause               order_by_clause : ['$1', {where, {}}, {'hierarchical query', {}}, '$2',              {having, {}}, '$3'].
-- table_exp -> from_clause                                        group_by_clause having_clause                 : ['$1', {where, {}}, {'hierarchical query', {}}, '$2',              '$3',         {'order by', []}].
-- table_exp -> from_clause                                        group_by_clause having_clause order_by_clause : ['$1', {where, {}}, {'hierarchical query', {}}, '$2',              '$3',         '$4'].
-- table_exp -> from_clause              hierarchical_query_clause                                               : ['$1', {where, {}}, '$2',                       {'group by', []},  {having, {}}, {'order by', []}].
-- table_exp -> from_clause              hierarchical_query_clause                               order_by_clause : ['$1', {where, {}}, '$2',                       {'group by', []},  {having, {}}, '$3'].
-- table_exp -> from_clause              hierarchical_query_clause                 having_clause                 : ['$1', {where, {}}, '$2',                       {'group by', []},  '$3',         {'order by', []}].
-- table_exp -> from_clause              hierarchical_query_clause                 having_clause order_by_clause : ['$1', {where, {}}, '$2',                       {'group by', []},  '$3',         '$4'].
-- table_exp -> from_clause              hierarchical_query_clause group_by_clause                               : ['$1', {where, {}}, '$2',                       '$3',              {having, {}}, {'order by', []}].
-- table_exp -> from_clause              hierarchical_query_clause group_by_clause               order_by_clause : ['$1', {where, {}}, '$2',                       '$3',              {having, {}}, '$4'].
-- table_exp -> from_clause              hierarchical_query_clause group_by_clause having_clause                 : ['$1', {where, {}}, '$2',                       '$3',              '$4',         {'order by', []}].
-- table_exp -> from_clause              hierarchical_query_clause group_by_clause having_clause order_by_clause : ['$1', {where, {}}, '$2',                       '$3',              '$4',         '$5'].
-- table_exp -> from_clause where_clause                                                                         : ['$1', '$2',        {'hierarchical query', {}}, {'group by', []},  {having, {}}, {'order by', []}].
-- table_exp -> from_clause where_clause                                                         order_by_clause : ['$1', '$2',        {'hierarchical query', {}}, {'group by', []},  {having, {}}, '$3'].
-- table_exp -> from_clause where_clause                                           having_clause                 : ['$1', '$2',        {'hierarchical query', {}}, {'group by', []},  '$3', {'order by', []}].
-- table_exp -> from_clause where_clause                                           having_clause order_by_clause : ['$1', '$2',        {'hierarchical query', {}}, {'group by', []},  '$3',         '$4'].
-- table_exp -> from_clause where_clause                           group_by_clause                               : ['$1', '$2',        {'hierarchical query', {}}, '$3',              {having, {}}, {'order by', []}].
-- table_exp -> from_clause where_clause                           group_by_clause               order_by_clause : ['$1', '$2',        {'hierarchical query', {}}, '$3',              {having, {}}, '$4'].
-- table_exp -> from_clause where_clause                           group_by_clause having_clause                 : ['$1', '$2',        {'hierarchical query', {}}, '$3',              '$4',         {'order by', []}].
-- table_exp -> from_clause where_clause                           group_by_clause having_clause order_by_clause : ['$1', '$2',        {'hierarchical query', {}}, '$3',              '$4',         '$5'].
-- table_exp -> from_clause where_clause hierarchical_query_clause                                               : ['$1', '$2',        '$3',                       {'group by', []},  {having, {}}, {'order by', []}].
-- table_exp -> from_clause where_clause hierarchical_query_clause                               order_by_clause : ['$1', '$2',        '$3',                       {'group by', []},  {having, {}}, '$4'].
-- table_exp -> from_clause where_clause hierarchical_query_clause                 having_clause                 : ['$1', '$2',        '$3',                       {'group by', []},  '$4', {'order by', []}].
-- table_exp -> from_clause where_clause hierarchical_query_clause                 having_clause order_by_clause : ['$1', '$2',        '$3',                       {'group by', []},  '$4',         '$5'].
-- table_exp -> from_clause where_clause hierarchical_query_clause group_by_clause                               : ['$1', '$2',        '$3',                       '$4',              {having, {}}, {'order by', []}].
-- table_exp -> from_clause where_clause hierarchical_query_clause group_by_clause               order_by_clause : ['$1', '$2',        '$3',                       '$4',              {having, {}}, '$5'].
-- table_exp -> from_clause where_clause hierarchical_query_clause group_by_clause having_clause                 : ['$1', '$2',        '$3',                       '$4',              '$5',         {'order by', []}].
-- table_exp -> from_clause where_clause hierarchical_query_clause group_by_clause having_clause order_by_clause : ['$1', '$2',        '$3',                       '$4',              '$5',         '$6'].

TableExp01.                       TableExp ::= FromClause                                                                              ;
TableExp02.                       TableExp ::= FromClause                                                                OrderByClause ;
TableExp03.                       TableExp ::= FromClause                                                   HavingClause               ;
TableExp04.                       TableExp ::= FromClause                                                   HavingClause OrderByClause ;
TableExp05.                       TableExp ::= FromClause                                     GroupByClause                            ;
TableExp06.                       TableExp ::= FromClause                                     GroupByClause              OrderByClause ;
TableExp07.                       TableExp ::= FromClause                                     GroupByClause HavingClause               ;
TableExp08.                       TableExp ::= FromClause                                     GroupByClause HavingClause OrderByClause ;
TableExp09.                       TableExp ::= FromClause             HierarchicalQueryClause                                          ;
TableExp10.                       TableExp ::= FromClause             HierarchicalQueryClause                            OrderByClause ;
TableExp11.                       TableExp ::= FromClause             HierarchicalQueryClause               HavingClause               ;
TableExp12.                       TableExp ::= FromClause             HierarchicalQueryClause               HavingClause OrderByClause ;
TableExp13.                       TableExp ::= FromClause             HierarchicalQueryClause GroupByClause                            ;
TableExp14.                       TableExp ::= FromClause             HierarchicalQueryClause GroupByClause              OrderByClause ;
TableExp15.                       TableExp ::= FromClause             HierarchicalQueryClause GroupByClause HavingClause               ;
TableExp16.                       TableExp ::= FromClause             HierarchicalQueryClause GroupByClause HavingClause OrderByClause ;
TableExp17.                       TableExp ::= FromClause WhereClause                                                                  ;
TableExp18.                       TableExp ::= FromClause WhereClause                                                    OrderByClause ;
TableExp19.                       TableExp ::= FromClause WhereClause                                       HavingClause               ;
TableExp20.                       TableExp ::= FromClause WhereClause                                       HavingClause OrderByClause ;
TableExp21.                       TableExp ::= FromClause WhereClause                         GroupByClause                            ;
TableExp22.                       TableExp ::= FromClause WhereClause                         GroupByClause              OrderByClause ;
TableExp23.                       TableExp ::= FromClause WhereClause                         GroupByClause HavingClause               ;
TableExp24.                       TableExp ::= FromClause WhereClause                         GroupByClause HavingClause OrderByClause ;
TableExp25.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause                                          ;
TableExp26.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause                            OrderByClause ;
TableExp27.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause               HavingClause               ;
TableExp28.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause               HavingClause OrderByClause ;
TableExp29.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause GroupByClause                            ;
TableExp30.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause GroupByClause              OrderByClause ;
TableExp31.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause GroupByClause HavingClause               ;
TableExp32.                       TableExp ::= FromClause WhereClause HierarchicalQueryClause GroupByClause HavingClause OrderByClause ;

-- from_clause -> FROM from_column_commalist : {from, '$2'}.

FromClause01.                     FromClause ::= "FROM" FromColumnCommalist ;

-- from_column -> table_ref           : ['$1'].
-- from_column -> '(' join_clause ')' : ['$2'].
-- from_column ->     join_clause     : ['$1'].

FromColumn01.                     FromColumn ::= TableRef           ;
FromColumn02.                     FromColumn ::= "(" JoinClause ")" ;
FromColumn03.                     FromColumn ::=     JoinClause     ;

-- from_column_commalist ->                           from_column :        '$1'.
-- from_column_commalist -> from_column_commalist ',' from_column : '$1'++ '$3'.

FromCommalist01.                  FromColumnCommalist ::=                         FromColumn ;
FromCommalist02.                  FromColumnCommalist ::= FromColumnCommalist "," FromColumn ;

-- join_clause -> table_ref join_list : {'$1', '$2'}.

JoinClause01.                     JoinClause ::= TableRef JoinList ;

-- join -> inner_cross_join : '$1'.
-- join -> outer_join       : '$1'.

Join01.                           Join ::= InnerCrossJoin ;
Join02.                           Join ::= OuterJoin      ;

-- join_list ->           join :        ['$1'].
-- join_list -> join_list join : '$1'++ ['$2'].

JoinList01.                       JoinList ::=          Join ;
JoinList02.                       JoinList ::= JoinList Join ;

-- inner_cross_join ->               JOIN join_ref join_on_or_using_clause : {join,               '$2', '$3'}.
-- inner_cross_join -> CROSS         JOIN join_ref                         : {cross_join,         '$3'}.
-- inner_cross_join -> INNER         JOIN join_ref join_on_or_using_clause : {join_inner,         '$3', '$4'}.
-- inner_cross_join -> NATURAL       JOIN join_ref                         : {natural_join,       '$3'}.
-- inner_cross_join -> NATURAL INNER JOIN join_ref                         : {natural_inner_join, '$4'}.

InnerCrossJoin01.                 InnerCrossJoin ::=                   "JOIN" JoinRef JoinOnOrUsingClause ;
InnerCrossJoin02.                 InnerCrossJoin ::= "CROSS"           "JOIN" JoinRef ;
InnerCrossJoin03.                 InnerCrossJoin ::= "INNER"           "JOIN" JoinRef JoinOnOrUsingClause ;
InnerCrossJoin04.                 InnerCrossJoin ::= "NATURAL"         "JOIN" JoinRef ;
InnerCrossJoin05.                 InnerCrossJoin ::= "NATURAL" "INNER" "JOIN" JoinRef ;

-- join_on_or_using_clause -> ON search_condition                  : {on,    '$2'}.
-- join_on_or_using_clause -> USING '(' select_field_commalist ')' : {using, '$3'}.

JoinOnOrUsingClause01.            JoinOnOrUsingClause ::= "ON" SearchCondition                 ;
JoinOnOrUsingClause02.            JoinOnOrUsingClause ::= "USING" "(" SelectFieldCommalist ")" ;

-- ----------------------------------------------------------------------------------------------- {{JoinType, Partition, OptNatural} ... }
-- outer_join ->                                outer_join_type JOIN join_ref                        join_on_or_using_clause : {{'$1', {},   {}},      '$3', {},   '$4'}.
-- outer_join ->                                outer_join_type JOIN join_ref                                                : {{'$1', {},   {}},      '$3', {},   {}}.
-- outer_join ->                                outer_join_type JOIN join_ref query_partition_clause                         : {{'$1', {},   {}},      '$3', '$4', {}}.
-- outer_join ->                                outer_join_type JOIN join_ref query_partition_clause join_on_or_using_clause : {{'$1', {},   {}},      '$3', '$4', '$5'}.
-- outer_join -> NATURAL                        outer_join_type JOIN join_ref                        join_on_or_using_clause : {{'$2', {},   natural}, '$4', {},   '$5'}.
-- outer_join -> NATURAL                        outer_join_type JOIN join_ref                                                : {{'$2', {},   natural}, '$4', {},   {}}.
-- outer_join -> NATURAL                        outer_join_type JOIN join_ref query_partition_clause                         : {{'$2', {},   natural}, '$4', '$5', {}}.
-- outer_join -> NATURAL                        outer_join_type JOIN join_ref query_partition_clause join_on_or_using_clause : {{'$2', {},   natural}, '$4', '$5', '$6'}.
-- outer_join -> query_partition_clause         outer_join_type JOIN join_ref                        join_on_or_using_clause : {{'$2', '$1', {}},      '$4', {},   '$5'}.
-- outer_join -> query_partition_clause         outer_join_type JOIN join_ref                                                : {{'$2', '$1', {}},      '$4', {},   {}}.
-- outer_join -> query_partition_clause         outer_join_type JOIN join_ref query_partition_clause                         : {{'$2', '$1', {}},      '$4', '$5', {}}.
-- outer_join -> query_partition_clause         outer_join_type JOIN join_ref query_partition_clause join_on_or_using_clause : {{'$2', '$1', {}},      '$4', '$5', '$6'}.
-- outer_join -> query_partition_clause NATURAL outer_join_type JOIN join_ref                        join_on_or_using_clause : {{'$3', '$1', natural}, '$5', {},   '$6'}.
-- outer_join -> query_partition_clause NATURAL outer_join_type JOIN join_ref                                                : {{'$3', '$1', natural}, '$5', {},   {}}.
-- outer_join -> query_partition_clause NATURAL outer_join_type JOIN join_ref query_partition_clause                         : {{'$3', '$1', natural}, '$5', '$6', {}}.
-- outer_join -> query_partition_clause NATURAL outer_join_type JOIN join_ref query_partition_clause join_on_or_using_clause : {{'$3', '$1', natural}, '$5', '$6', '$7'}.

OuterJoin01.                      OuterJoin ::=                                OuterJoinType "JOIN" JoinRef                                          ;
OuterJoin02.                      OuterJoin ::=                                OuterJoinType "JOIN" JoinRef                      JoinOnOrUsingClause ;
OuterJoin03.                      OuterJoin ::=                                OuterJoinType "JOIN" JoinRef QueryPartitionClause                     ;
OuterJoin04.                      OuterJoin ::=                                OuterJoinType "JOIN" JoinRef QueryPartitionClause JoinOnOrUsingClause ;
OuterJoin05.                      OuterJoin ::= "NATURAL"                      OuterJoinType "JOIN" JoinRef                                          ;
OuterJoin06.                      OuterJoin ::= "NATURAL"                      OuterJoinType "JOIN" JoinRef                      JoinOnOrUsingClause ;
OuterJoin07.                      OuterJoin ::= "NATURAL"                      OuterJoinType "JOIN" JoinRef QueryPartitionClause                     ;
OuterJoin08.                      OuterJoin ::= "NATURAL"                      OuterJoinType "JOIN" JoinRef QueryPartitionClause JoinOnOrUsingClause ;
OuterJoin09.                      OuterJoin ::= QueryPartitionClause           OuterJoinType "JOIN" JoinRef                                          ;
OuterJoin10.                      OuterJoin ::= QueryPartitionClause           OuterJoinType "JOIN" JoinRef                      JoinOnOrUsingClause ;
OuterJoin11.                      OuterJoin ::= QueryPartitionClause           OuterJoinType "JOIN" JoinRef QueryPartitionClause                     ;
OuterJoin12.                      OuterJoin ::= QueryPartitionClause           OuterJoinType "JOIN" JoinRef QueryPartitionClause JoinOnOrUsingClause ;
OuterJoin13.                      OuterJoin ::= QueryPartitionClause "NATURAL" OuterJoinType "JOIN" JoinRef                                          ;
OuterJoin14.                      OuterJoin ::= QueryPartitionClause "NATURAL" OuterJoinType "JOIN" JoinRef                      JoinOnOrUsingClause ;
OuterJoin15.                      OuterJoin ::= QueryPartitionClause "NATURAL" OuterJoinType "JOIN" JoinRef QueryPartitionClause                     ;
OuterJoin16.                      OuterJoin ::= QueryPartitionClause "NATURAL" OuterJoinType "JOIN" JoinRef QueryPartitionClause JoinOnOrUsingClause ;
-- -----------------------------------------------------------------------------------------------

-- query_partition_clause -> PARTITION BY     scalar_exp_commalist     : {partition_by, '$3'} .
-- query_partition_clause -> PARTITION BY '(' scalar_exp_commalist ')' : {partition_by, '$4'}.

QueryPartitionClause01.           QueryPartitionClause ::= "PARTITION" "BY"     ScalarExpCommalist     ;
QueryPartitionClause02.           QueryPartitionClause ::= "PARTITION" "BY" "(" ScalarExpCommalist ")" ;

-- outer_join_type -> FULL        : full.
-- outer_join_type -> FULL  OUTER : full_outer.
-- outer_join_type -> LEFT        : left.
-- outer_join_type -> LEFT  OUTER : left_outer.
-- outer_join_type -> RIGHT       : right.
-- outer_join_type -> RIGHT OUTER : right_outer.

OuterJoinType01.                  OuterJoinType ::= "FULL"          ;
OuterJoinType02.                  OuterJoinType ::= "FULL"  "OUTER" ;
OuterJoinType03.                  OuterJoinType ::= "LEFT"          ;
OuterJoinType04.                  OuterJoinType ::= "LEFT"  "OUTER" ;
OuterJoinType05.                  OuterJoinType ::= "RIGHT"         ;
OuterJoinType06.                  OuterJoinType ::= "RIGHT" "OUTER" ;

-- table_ref -> table_dblink    : '$1'.
-- table_ref -> query_term      : '$1'.
-- table_ref -> query_term NAME : {as, '$1', unwrap_bin('$2')}.

TableRef01.                       TableRef ::= TableDblink      ;
TableRef02.                       TableRef ::= QueryTerm        ;
TableRef03.                       TableRef ::= QueryTerm "NAME" ;

-- join_ref -> table_dblink    : '$1'.
-- join_ref -> query_term      : '$1'.
-- join_ref -> query_term NAME : {as, '$1', unwrap_bin('$2')}.

JoinRef01.                        JoinRef ::= TableDblink      ;
JoinRef02.                        JoinRef ::= QueryTerm        ;
JoinRef03.                        JoinRef ::= QueryTerm "NAME" ;

-- hierarchical_query_clause -> START WITH         search_condition CONNECT BY         search_condition : {'hierarchical query', {{'start with', '$3'},       {'connect by', <<>>, '$6'}}}.
-- hierarchical_query_clause -> START WITH         search_condition CONNECT BY nocycle search_condition : {'hierarchical query', {{'start with', '$3'},       {'connect by', '$6', '$7'}}}.
-- hierarchical_query_clause -> CONNECT BY         search_condition START WITH         search_condition : {'hierarchical query', {{'connect by', <<>>, '$3'}, {'start with', '$6'}}}.
-- hierarchical_query_clause -> CONNECT BY nocycle search_condition START WITH         search_condition : {'hierarchical query', {{'connect by', '$3', '$4'}, {'start with', '$7'}}}.

HierarchicalQueryClause01.        HierarchicalQueryClause ::= "START" "WITH" SearchCondition "CONNECT" "BY"         SearchCondition ;
HierarchicalQueryClause02.        HierarchicalQueryClause ::= "START" "WITH" SearchCondition "CONNECT" "BY" Nocycle SearchCondition ;
HierarchicalQueryClause03.        HierarchicalQueryClause ::= "CONNECT" "BY"         SearchCondition "START" "WITH" SearchCondition ;
HierarchicalQueryClause04.        HierarchicalQueryClause ::= "CONNECT" "BY" Nocycle SearchCondition "START" "WITH" SearchCondition ;

-- nocycle -> NOCYCLE : <<"nocycle">>.

Nocycle01.                        Nocycle ::= "NOCYCLE" ;

-- where_clause -> WHERE search_condition : {where, '$2'}.

WhereClause01.                    WhereClause ::= "WHERE" SearchCondition ;

-- group_by_clause -> GROUP BY column_ref_commalist : {'group by', '$3'}.

GroupByClause01.                  GroupByClause  ::= "GROUP" "BY" ColumnRefCommalist ;

-- column_ref_commalist ->                          column_ref   :         ['$1'].
-- column_ref_commalist ->                          function_ref :         ['$1'].
-- column_ref_commalist -> column_ref_commalist ',' column_ref   : '$1' ++ ['$3'].
-- column_ref_commalist -> column_ref_commalist ',' function_ref : '$1' ++ ['$3'].

ColumnRefCommalist01.             ColumnRefCommalist ::=                        ColumnRef   ;
ColumnRefCommalist02.             ColumnRefCommalist ::=                        FunctionRef ;
ColumnRefCommalist03.             ColumnRefCommalist ::= ColumnRefCommalist "," ColumnRef   ;
ColumnRefCommalist04.             ColumnRefCommalist ::= ColumnRefCommalist "," FunctionRef ;

-- having_clause -> HAVING search_condition : {having, '$2'}.

HavingClause01.                   HavingClause ::= "HAVING" SearchCondition ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- search conditions
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- search_condition -> search_condition OR  search_condition : {'or',  '$1', '$3'}.
-- search_condition -> search_condition AND search_condition : {'and', '$1', '$3'}.
-- search_condition -> NOT search_condition                  : {'not', '$2'}.
-- search_condition -> '(' search_condition ')'              : '$2'.
-- search_condition -> predicate                             : '$1'.

SearchCondition01.                SearchCondition ::= SearchCondition "OR"  SearchCondition ;
SearchCondition02.                SearchCondition ::= SearchCondition "AND" SearchCondition ;
SearchCondition03.                SearchCondition ::= "NOT" SearchCondition                 ;
SearchCondition04.                SearchCondition ::= "(" SearchCondition ")"               ;
SearchCondition05.                SearchCondition ::= Predicate                             ;

-- predicate -> comparison_predicate : '$1'.
-- predicate -> between_predicate    : '$1'.
-- predicate -> like_predicate       : '$1'.
-- predicate -> test_for_null        : '$1'.
-- predicate -> in_predicate         : '$1'.
-- predicate -> all_or_any_predicate : '$1'.
-- predicate -> existence_test       : '$1'.

Predicate01.                      Predicate ::= ComparisonPredicate ;
Predicate02.                      Predicate ::= BetweenPredicate    ;
Predicate03.                      Predicate ::= LikePredicate       ;
Predicate04.                      Predicate ::= TestForNull         ;
Predicate05.                      Predicate ::= InPredicate         ;
Predicate06.                      Predicate ::= AllOrAnyPredicate   ;
Predicate07.                      Predicate ::= ExistenceTest       ;

-- comparison_predicate -> scalar_opt_as_exp                            : '$1'.
-- comparison_predicate ->       scalar_exp '='        PRIOR scalar_exp : {'=',          '$1',          {prior, '$4'}}.
-- comparison_predicate ->       scalar_exp COMPARISON PRIOR scalar_exp : {unwrap('$2'), '$1',          {prior, '$4'}}.
-- comparison_predicate -> PRIOR scalar_exp '='              scalar_exp : {'=',          {prior, '$2'}, '$4'}.
-- comparison_predicate -> PRIOR scalar_exp COMPARISON       scalar_exp : {unwrap('$3'), {prior, '$2'}, '$4'}.

ComparisonPredicate01.            ComparisonPredicate ::= ScalarOptAsExp                                   ;
ComparisonPredicate02.            ComparisonPredicate ::=         ScalarExp "="          "PRIOR" ScalarExp ;
ComparisonPredicate03.            ComparisonPredicate ::=         ScalarExp "COMPARISON" "PRIOR" ScalarExp ;
ComparisonPredicate04.            ComparisonPredicate ::= "PRIOR" ScalarExp "="                  ScalarExp ;
ComparisonPredicate05.            ComparisonPredicate ::= "PRIOR" ScalarExp "COMPARISON"         ScalarExp ;

-- between_predicate -> scalar_exp     BETWEEN scalar_exp AND scalar_exp:         {between, '$1', '$3', '$5'}.
-- between_predicate -> scalar_exp not_between scalar_exp AND scalar_exp: {'not', {between, '$1', '$3', '$5'}}.

BetweenPredicate01.               BetweenPredicate ::= ScalarExp "BETWEEN"  ScalarExp "AND" ScalarExp ;
BetweenPredicate02.               BetweenPredicate ::= ScalarExp NotBetween ScalarExp "AND" ScalarExp ;

-- not_between -> NOT BETWEEN : 'not between'.

NotBetween01.                     NotBetween ::= "NOT" "BETWEEN" ;

-- like_predicate -> scalar_exp     LIKE scalar_exp        :         {like, '$1', '$3', <<>>}.
-- like_predicate -> scalar_exp     LIKE scalar_exp escape :         {like, '$1', '$3', '$4'}.
-- like_predicate -> scalar_exp not_like scalar_exp        : {'not', {like, '$1', '$3', <<>>}}.
-- like_predicate -> scalar_exp not_like scalar_exp escape : {'not', {like, '$1', '$3', '$4'}}.

LikePredicate01.                  LikePredicate ::= ScalarExp "LIKE"  ScalarExp        ;
LikePredicate02.                  LikePredicate ::= ScalarExp "LIKE"  ScalarExp Escape ;
LikePredicate03.                  LikePredicate ::= ScalarExp NotLike ScalarExp        ;
LikePredicate04.                  LikePredicate ::= ScalarExp NotLike ScalarExp Escape ;

-- not_like -> NOT LIKE  : 'not like'.

NotLike01.                        NotLike ::= "NOT" "LIKE" ;

-- escape -> ESCAPE atom : '$2'.

Escape01.                         Escape ::= "ESCAPE" Atom ;

-- test_for_null -> scalar_exp is_null     :         {'is', '$1', <<"null">>}.
-- test_for_null -> scalar_exp is_not_null : {'not', {'is', '$1', <<"null">>}}.

TestForNull01.                    TestForNull ::= ScalarExp IsNotNull ;
TestForNull02.                    TestForNull ::= ScalarExp IsNull    ;

-- is_not_null -> IS NOT NULLX : 'is not'.

IsNotNull01.                      IsNotNull ::= "IS" "NOT" "NULL" ;

-- is_null -> IS NULLX : is.

IsNull01.                         IsNull ::= "IS" "NULL" ;

-- in_predicate -> scalar_exp     IN '(' scalar_exp_commalist ')' :         {in, '$1', {list, '$4'}}.
-- in_predicate -> scalar_exp     IN '(' subquery ')'             :         {in, '$1', '$4'}.
-- in_predicate -> scalar_exp not_in '(' scalar_exp_commalist ')' : {'not', {in, '$1', {list, '$4'}}}.
-- in_predicate -> scalar_exp not_in '(' subquery ')'             : {'not', {in, '$1', '$4'}}.

InPredicate04.                    InPredicate ::= ScalarExp "IN" "(" ScalarExpCommalist ")" ;
InPredicate02.                    InPredicate ::= ScalarExp "IN" "(" Subquery ")"           ;
InPredicate03.                    InPredicate ::= ScalarExp NotIn "(" ScalarExpCommalist ")" ;
InPredicate01.                    InPredicate ::= ScalarExp NotIn "(" Subquery ")"           ;

-- not_in -> NOT IN : 'not in'.

NotIn01.                          NotIn ::= "NOT" "IN" ;

-- all_or_any_predicate -> scalar_exp '='        any_all_some subquery : {'=',          '$1', {'$3', ['$4']}}.
-- all_or_any_predicate -> scalar_exp COMPARISON any_all_some subquery : {unwrap('$2'), '$1', {'$3', ['$4']}}.

AllOrAnyPredicate01.              AllOrAnyPredicate ::= ScalarExp "="          AnyAllSome Subquery ;
AllOrAnyPredicate02.              AllOrAnyPredicate ::= ScalarExp "COMPARISON" AnyAllSome Subquery ;

-- any_all_some -> ANY  : any.
-- any_all_some -> ALL  : all.
-- any_all_some -> SOME : some.

AnyAllSome01.                     AnyAllSome ::= "ANY"  ;
AnyAllSome02.                     AnyAllSome ::= "ALL"  ;
AnyAllSome03.                     AnyAllSome ::= "SOME" ;

-- existence_test -> EXISTS subquery : {exists, '$2'}.

ExistenceTest01.                  ExistenceTest ::= "EXISTS" Subquery ;

-- table_coll_expr -> TABLE '(' column_ref   ')' : {table_coll_expr, '$3'}.
-- table_coll_expr -> TABLE '(' function_ref ')' : {table_coll_expr, '$3'}.
-- table_coll_expr -> TABLE '(' subquery     ')' : {table_coll_expr, '$3'}.

TableCollExprey01.                TableCollExpr ::= "TABLE" "(" ColumnRef   ")" ;
TableCollExprey02.                TableCollExpr ::= "TABLE" "(" FunctionRef ")" ;
TableCollExprey03.                TableCollExpr ::= "TABLE" "(" Subquery    ")" ;

-- subquery -> query_exp : '$1'.

Subquery01.                       Subquery ::= QueryExp ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Scalar expressions
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- scalar_opt_as_exp_1 -> scalar_exp                       : '$1'.
-- scalar_opt_as_exp_1 -> scalar_exp '='        scalar_exp : {'=',          '$1', '$3'}.
-- scalar_opt_as_exp_1 -> scalar_exp COMPARISON scalar_exp : {unwrap('$2'), '$1', '$3'}.

ScalarOptAsExp101.                ScalarOptAsExp1 ::= ScalarExp                        ;
ScalarOptAsExp102.                ScalarOptAsExp1 ::= ScalarExp "="          ScalarExp ;
ScalarOptAsExp103.                ScalarOptAsExp1 ::= ScalarExp "COMPARISON" ScalarExp ;

-- scalar_opt_as_exp_2 -> scalar_exp    NAME : {as, '$1', unwrap_bin('$2')}.
-- scalar_opt_as_exp_2 -> scalar_exp AS NAME : {as, '$1', unwrap_bin('$3')}.

ScalarOptAsExp201.                ScalarOptAsExp2 ::= ScalarExp      "NAME" ;
ScalarOptAsExp202.                ScalarOptAsExp2 ::= ScalarExp "AS" "NAME" ;

-- scalar_opt_as_exp -> scalar_opt_as_exp_1 : '$1'.
-- scalar_opt_as_exp -> scalar_opt_as_exp_2 : '$1'.

ScalarOptAsExp01.                 ScalarOptAsExp ::= ScalarOptAsExp1 ;
ScalarOptAsExp02.                 ScalarOptAsExp ::= ScalarOptAsExp2 ;

-- scalar_exp -> scalar_sub_exp '||' scalar_exp : {'||','$1','$3'}.
-- scalar_exp -> scalar_sub_exp                 : '$1'.

ScalarExp01.                      ScalarExp ::= ScalarSubExp "||" ScalarExp ;
ScalarExp02.                      ScalarExp ::= ScalarSubExp                ;

-- scalar_sub_exp -> scalar_sub_exp '+'    scalar_sub_exp : {'+','$1','$3'}.
-- scalar_sub_exp -> scalar_sub_exp '-'    scalar_sub_exp : {'-','$1','$3'}.
-- scalar_sub_exp -> scalar_sub_exp '*'    scalar_sub_exp : {'*','$1','$3'}.
-- scalar_sub_exp -> scalar_sub_exp '/'    scalar_sub_exp : {'/','$1','$3'}.
-- scalar_sub_exp -> scalar_sub_exp 'div'  scalar_sub_exp : {'div','$1','$3'}.
-- scalar_sub_exp -> unary_add_or_subtract scalar_sub_exp : {'$1','$2'}.
-- scalar_sub_exp -> NULLX                                : <<"NULL">>.
-- scalar_sub_exp -> atom                                 : '$1'.
-- scalar_sub_exp -> subquery                             : '$1'.
-- scalar_sub_exp -> column_ref                           : '$1'.
-- scalar_sub_exp -> function_ref                         : '$1'.
-- scalar_sub_exp -> '(' scalar_sub_exp ')'               : '$2'.
-- scalar_sub_exp -> '(' scalar_sub_exp ')' JSON          : {'$2', jpparse(list_to_binary([unwrap('$4')])), '('}.

ScalarSubExp01.                   ScalarSubExp ::= ScalarSubExp "+"   ScalarSubExp ;
ScalarSubExp02.                   ScalarSubExp ::= ScalarSubExp "-"   ScalarSubExp ;
ScalarSubExp03.                   ScalarSubExp ::= ScalarSubExp "*"   ScalarSubExp ;
ScalarSubExp04.                   ScalarSubExp ::= ScalarSubExp "/"   ScalarSubExp ;
ScalarSubExp05.                   ScalarSubExp ::= ScalarSubExp "div" ScalarSubExp ;
ScalarSubExp06.                   ScalarSubExp ::= UnaryAddOrSubtract ScalarSubExp ;
ScalarSubExp10.                   ScalarSubExp ::= "NULL"                          ;
ScalarSubExp11.                   ScalarSubExp ::= Atom                            ;
ScalarSubExp12.                   ScalarSubExp ::= Subquery                        ;
ScalarSubExp13.                   ScalarSubExp ::= ColumnRef                       ;
ScalarSubExp14.                   ScalarSubExp ::= FunctionRef                     ;
ScalarSubExp15.                   ScalarSubExp ::= "(" ScalarSubExp ")"            ;
ScalarSubExp16.                   ScalarSubExp ::= "(" ScalarSubExp ")" "JSON"     ;

-- unary_add_or_subtract -> '+' : '+'.
-- unary_add_or_subtract -> '-' : '-'.

UnaryAddOrSubtract01.             UnaryAddOrSubtract ::= "+" ;
UnaryAddOrSubtract02.             UnaryAddOrSubtract ::= "-" ;

-- scalar_exp_commalist ->                          scalar_opt_as_exp :         ['$1'].
-- scalar_exp_commalist -> scalar_exp_commalist ',' scalar_opt_as_exp : '$1' ++ ['$3'].

ScalarExpCommalist01.             ScalarExpCommalist ::=                        ScalarOptAsExp ;
ScalarExpCommalist02.             ScalarExpCommalist ::= ScalarExpCommalist "," ScalarOptAsExp ;

-- atom -> parameter_ref : '$1'.
-- atom -> literal       : '$1'.
-- atom -> USER          : <<"user">>.

Atom01.                           Atom ::= ParameterRef ;
Atom02.                           Atom ::= Literal      ;
Atom03.                           Atom ::= "USER"       ;

-- parameter_ref -> parameter                     : '$1'.
-- parameter_ref -> parameter           parameter : {'$1', '$2'}.
-- parameter_ref -> parameter INDICATOR parameter : {indicator, '$1', '$3'}.

ParameterRef01.                   ParameterRef ::= Parameter                       ;
ParameterRef02.                   ParameterRef ::= Parameter             Parameter ;
ParameterRef03.                   ParameterRef ::= Parameter "INDICATOR" Parameter ;

-- function_ref -> function_ref JSON                                               : {'$1', jpparse(list_to_binary([unwrap('$2')])), []}.
-- function_ref -> FUNS                                                            : {'fun', unwrap_bin('$1'), []}.
-- function_ref -> FUNS '('                     ')'                                : {'fun', unwrap_bin('$1'), []}.
-- function_ref -> FUNS '(' '*'                 ')'                                : {'fun', unwrap_bin('$1'), [<<"*">>]}.
-- function_ref -> FUNS '(' ALL      scalar_exp ')'                                : {'fun', unwrap_bin('$1'), [{all,      '$4'}]}.
-- function_ref -> FUNS '(' DISTINCT column_ref ')'                                : {'fun', unwrap_bin('$1'), [{distinct, '$4'}]}.
-- function_ref -> FUNS '(' fun_args            ')'                                : {'fun', unwrap_bin('$1'), make_list('$3')}.
-- function_ref -> FUNS '(' fun_args_named      ')'                                : {'fun', unwrap_bin('$1'), make_list('$3')}.
-- function_ref -> identifier                               '('                ')' : {'fun', '$1', []}.
-- function_ref -> identifier                               '(' fun_args       ')' : {'fun', '$1', make_list('$3')}.
-- function_ref -> identifier                               '(' fun_args_named ')' : {'fun', '$1', make_list('$3')}.
-- function_ref -> identifier '.' identifier                '('                ')' : {'fun', list_to_binary(['$1', ".", '$3']), []}.
-- function_ref -> identifier '.' identifier                '(' fun_args       ')' : {'fun', list_to_binary(['$1', ".", '$3']), make_list('$5')}.
-- function_ref -> identifier '.' identifier                '(' fun_args_named ')' : {'fun', list_to_binary(['$1', ".", '$3']), make_list('$5')}.
-- function_ref -> identifier '.' identifier '.' identifier '('                ')' : {'fun', list_to_binary(['$1', ".", '$3', ".", '$5']), []}.
-- function_ref -> identifier '.' identifier '.' identifier '(' fun_args       ')' : {'fun', list_to_binary(['$1', ".", '$3', ".", '$5']), make_list('$7')}.
-- function_ref -> identifier '.' identifier '.' identifier '(' fun_args_named ')' : {'fun', list_to_binary(['$1', ".", '$3', ".", '$5']), make_list('$7')}.

FunctionRef01.                    FunctionRef ::= FunctionRef "JSON"                                            ;
FunctionRef02.                    FunctionRef ::= "FUNS"                                                        ;
FunctionRef03.                    FunctionRef ::= "FUNS"  "("                      ")"                          ;
FunctionRef04.                    FunctionRef ::= "FUNS"  "(" "*"                  ")"                          ;
FunctionRef05.                    FunctionRef ::= "FUNS"  "(" "ALL"      ScalarExp ")"                          ;
FunctionRef06.                    FunctionRef ::= "FUNS"  "(" "DISTINCT" ColumnRef ")"                          ;
FunctionRef07.                    FunctionRef ::= "FUNS"  "(" FunArgs              ")"                          ;
FunctionRef08.                    FunctionRef ::= "FUNS"  "(" FunArgsNamed         ")"                          ;
FunctionRef09.                    FunctionRef ::= Identifier                               "("              ")" ;
FunctionRef10.                    FunctionRef ::= Identifier                               "(" FunArgs      ")" ;
FunctionRef11.                    FunctionRef ::= Identifier                               "(" FunArgsNamed ")" ;
FunctionRef12.                    FunctionRef ::= Identifier "." Identifier                "("              ")" ;
FunctionRef13.                    FunctionRef ::= Identifier "." Identifier                "(" FunArgs      ")" ;
FunctionRef14.                    FunctionRef ::= Identifier "." Identifier                "(" FunArgsNamed ")" ;
FunctionRef15.                    FunctionRef ::= Identifier "." Identifier "." Identifier "("              ")" ;
FunctionRef16.                    FunctionRef ::= Identifier "." Identifier "." Identifier "(" FunArgs      ")" ;
FunctionRef17.                    FunctionRef ::= Identifier "." Identifier "." Identifier "(" FunArgsNamed ")" ;

-- fun_args -> fun_arg              : ['$1'].
-- fun_args -> fun_arg ',' fun_args : ['$1' | '$3'].

FunArgs01.                        FunArgs ::= FunArg             ;
FunArgs02.                        FunArgs ::= FunArg "," FunArgs ;

-- fun_arg -> '(' fun_arg ')'               : '$2'.
-- fun_arg -> atom                          : '$1'.
-- fun_arg -> case_when_exp                 : '$1'.
-- fun_arg -> column_ref                    : '$1'.
-- fun_arg -> fun_arg       NAME            : {as,   '$1',unwrap_bin('$2')}.
-- fun_arg -> fun_arg '*'   fun_arg         : {'*',  '$1','$3'}.
-- fun_arg -> fun_arg '+'   fun_arg         : {'+',  '$1','$3'}.
-- fun_arg -> fun_arg '-'   fun_arg         : {'-',  '$1','$3'}.
-- fun_arg -> fun_arg '/'   fun_arg         : {'/',  '$1','$3'}.
-- fun_arg -> fun_arg '='   fun_arg         : {'=',  '$1','$3'}.
-- fun_arg -> fun_arg 'div' fun_arg         : {'div','$1','$3'}.
-- fun_arg -> fun_arg '||'  fun_arg         : {'||', '$1','$3'}.
-- fun_arg -> fun_arg AS    NAME            : {explicit_as,  '$1', unwrap_bin('$3')}.
-- fun_arg -> fun_arg COMPARISON fun_arg    : {unwrap('$2'), '$1', '$3'}.
-- fun_arg -> function_ref                  : '$1'.
-- fun_arg -> NULLX                         : <<"NULL">>.
-- fun_arg -> subquery                      : '$1'.
-- fun_arg -> unary_add_or_subtract fun_arg : {'$1', '$2'}.

FunArg01.                         FunArg ::= "(" FunArg ")"             ;
FunArg02.                         FunArg ::= Atom                       ;
FunArg03.                         FunArg ::= CaseWhenExp                ;
FunArg04.                         FunArg ::= ColumnRef                  ;
FunArg05.                         FunArg ::= FunArg       "NAME"        ;
FunArg06.                         FunArg ::= FunArg "*"   FunArg        ;
FunArg07.                         FunArg ::= FunArg "+"   FunArg        ;
FunArg08.                         FunArg ::= FunArg "-"   FunArg        ;
FunArg09.                         FunArg ::= FunArg "/"   FunArg        ;
FunArg10.                         FunArg ::= FunArg "="   FunArg        ;
FunArg11.                         FunArg ::= FunArg "div" FunArg        ;
FunArg12.                         FunArg ::= FunArg "||"  FunArg        ;
FunArg13.                         FunArg ::= FunArg "AS"  "NAME"        ;
FunArg14.                         FunArg ::= FunArg "COMPARISON" FunArg ;
FunArg15.                         FunArg ::= FunctionRef                ;
FunArg16.                         FunArg ::= "NULL"                     ;
FunArg17.                         FunArg ::= Subquery                   ;
FunArg18.                         FunArg ::= "+" FunArg                 ;
FunArg19.                         FunArg ::= "-" FunArg                 ;

-- fun_args_named -> fun_arg_named                    : ['$1'].
-- fun_args_named -> fun_arg_named ',' fun_args_named : ['$1' | '$3'].

FunArgsNamed01.                   FunArgsNamed ::= FunArgNamed                  ;
FunArgsNamed02.                   FunArgsNamed ::= FunArgNamed "," FunArgsNamed ;

-- fun_arg_named -> identifier '=>' identifier : {'=>', '$1', '$3'}.
-- fun_arg_named -> identifier '=>' literal    : {'=>', '$1', '$3'}.
-- fun_arg_named -> identifier '=>' parameter  : {'=>', '$1', '$3'}.

FunArgNamed01.                    FunArgNamed ::= Identifier "=>" Literal    ;
FunArgNamed02.                    FunArgNamed ::= Identifier "=>" Identifier ;
FunArgNamed03.                    FunArgNamed ::= Identifier "=>" Parameter  ;

-- literal -> STRING    : unwrap_bin('$1').
-- literal -> INTNUM    : unwrap_bin('$1').
-- literal -> APPROXNUM : unwrap_bin('$1').

Literal01.                        Literal ::= "STRING"    ;
Literal02.                        Literal ::= "INTNUM"    ;
Literal03.                        Literal ::= "APPROXNUM" ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- miscellaneous
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- table -> identifier                : '$1'.
-- table -> identifier '.' identifier : list_to_binary(['$1',".",'$3']).
-- table -> parameter                 : '$1'.

Table01.                          Table ::= Identifier                ;
Table02.                          Table ::= Identifier "." Identifier ;
Table03.                          Table ::= Parameter                 ;

-- table_alias -> identifier                NAME : {as, '$1',                            unwrap_bin('$2')}.
-- table_alias -> identifier '.' identifier NAME : {as, list_to_binary(['$1',".",'$3']), unwrap_bin('$4')}.
-- table_alias -> parameter                 NAME : {as, '$1',                            unwrap_bin('$2')}.
-- table_alias -> table                          : '$1'.

TableAlias01.                     TableAlias ::= Identifier                "NAME" ;
TableAlias02.                     TableAlias ::= Identifier "." Identifier "NAME" ;
TableAlias03.                     TableAlias ::= Parameter                 "NAME" ;
TableAlias04.                     TableAlias ::= Table                            ;

-- table_dblink -> identifier          DBLINK                 : {    '$1',                                              {dblink, unwrap_bin('$2')}}.
-- table_dblink -> identifier          DBLINK            NAME : {as, '$1',                            unwrap_bin('$3'), {dblink, unwrap_bin('$2')}}.
-- table_dblink -> identifier      '.' identifier DBLINK      : {    list_to_binary(['$1',".",'$3']),                   {dblink, unwrap_bin('$4')}}.
-- table_dblink -> identifier      '.' identifier DBLINK NAME : {as, list_to_binary(['$1',".",'$3']), unwrap_bin('$5'), {dblink, unwrap_bin('$4')}}.
-- table_dblink -> parameter           DBLINK                 : {    '$1',                                              {dblink, unwrap_bin('$2')}}.
-- table_dblink -> parameter           DBLINK            NAME : {as, '$1',                            unwrap_bin('$3'), {dblink, unwrap_bin('$2')}}.
-- table_dblink -> table_alias                                : '$1'.
-- table_dblink -> table_coll_expr                            : '$1'.

TableDblink01.                    TableDblink ::= Identifier                "DBLINK"        ;
TableDblink02.                    TableDblink ::= Identifier                "DBLINK" "NAME" ;
TableDblink03.                    TableDblink ::= Identifier "." Identifier "DBLINK"        ;
TableDblink04.                    TableDblink ::= Identifier "." Identifier "DBLINK" "NAME" ;
TableDblink05.                    TableDblink ::= Parameter                 "DBLINK"        ;
TableDblink06.                    TableDblink ::= Parameter                 "DBLINK" "NAME" ;
TableDblink07.                    TableDblink ::= TableAlias                                ;
TableDblink08.                    TableDblink ::= TableCollExpr                             ;

-- column_ref ->                               identifier             : '$1'.
-- column_ref ->                               identifier '(' '+' ')' : list_to_binary(['$1',"(+)"]).
-- column_ref ->                               identifier JSON        : jpparse(list_to_binary(['$1',unwrap('$2')])).
-- column_ref ->                               identifier '.' '*'     : list_to_binary(['$1',".*"]).
-- column_ref ->                identifier '.' identifier             : list_to_binary(['$1',".",'$3']).
-- column_ref ->                identifier '.' identifier '(' '+' ')' : list_to_binary(['$1',".",'$3',"(+)"]).
-- column_ref ->                identifier '.' identifier JSON        : jpparse(list_to_binary(['$1',".",'$3',unwrap('$4')])).
-- column_ref ->                identifier '.' identifier '.' '*'     : list_to_binary(['$1',".",'$3',".*"]).
-- column_ref -> identifier '.' identifier '.' identifier             : list_to_binary(['$1',".",'$3',".",'$5']).
-- column_ref -> identifier '.' identifier '.' identifier '(' '+' ')' : list_to_binary(['$1',".",'$3',".",'$5',"(+)"]).
-- column_ref -> identifier '.' identifier '.' identifier JSON        : jpparse(list_to_binary(['$1',".",'$3',".",'$5',unwrap('$6')])).

ColumnRef01.                      ColumnRef ::=                               Identifier                 ;
ColumnRef02.                      ColumnRef ::=                               Identifier         "JSON"  ;
ColumnRef03.                      ColumnRef ::=                               Identifier     "(" "+" ")" ;
ColumnRef04.                      ColumnRef ::=                Identifier "." "*"                        ;
ColumnRef05.                      ColumnRef ::=                Identifier "." Identifier                 ;
ColumnRef06.                      ColumnRef ::=                Identifier "." Identifier         "JSON"  ;
ColumnRef07.                      ColumnRef ::=                Identifier "." Identifier     "(" "+" ")" ;
ColumnRef08.                      ColumnRef ::= Identifier "." Identifier "." Identifier                 ;
ColumnRef09.                      ColumnRef ::= Identifier "." Identifier "." Identifier         "JSON"  ;
ColumnRef10.                      ColumnRef ::= Identifier "." Identifier "." Identifier     "(" "+" ")" ;
ColumnRef11.                      ColumnRef ::= Identifier "." Identifier "." "*"                        ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- data types
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- data_type -> BFILE                                 : unwrap_bin('$1').
-- data_type -> BINARY_DOUBLE                         : unwrap_bin('$1').
-- data_type -> BINARY_FLOAT                          : unwrap_bin('$1').
-- data_type -> BLOB                                  : unwrap_bin('$1').
-- data_type -> CHAR                                  : unwrap_bin('$1').
-- data_type -> CLOB                                  : unwrap_bin('$1').
-- data_type -> DATE                                  : unwrap_bin('$1').
-- data_type -> FLOAT                                 : unwrap_bin('$1').
-- data_type -> LONG                                  : unwrap_bin('$1').
-- data_type -> LONG RAW                              : list_to_binary([unwrap_bin('$1')," ",unwrap_bin('$2')]).
-- data_type -> NAME                                  : unwrap_bin('$1').
-- data_type -> identifier '.' NAME                   : list_to_binary(['$1',".",unwrap_bin('$3')]).
-- data_type -> NCLOB                                 : unwrap_bin('$1').
-- data_type -> NUMBER                                : unwrap_bin('$1').
-- data_type -> RAW                                   : unwrap_bin('$1').
-- data_type -> ROWID                                 : unwrap_bin('$1').
-- data_type -> TIMESTAMP                             : unwrap_bin('$1').
-- data_type -> UROWID                                : unwrap_bin('$1').
-- data_type -> VARCHAR2                              : unwrap_bin('$1').
-- data_type -> XMLTYPE                               : unwrap_bin('$1').
-- data_type -> CHAR      '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> FLOAT     '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> NAME      '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> NCHAR     '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> NUMBER    '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> NVARCHAR2 '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> RAW       '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> TIMESTAMP '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> UROWID    '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> VARCHAR2  '(' sgn_num ')'             : {unwrap_bin('$1'), '$3'}.
-- data_type -> NAME      '(' sgn_num ',' sgn_num ')' : {unwrap_bin('$1'), '$3', '$5'}.
-- data_type -> NUMBER    '(' sgn_num ',' sgn_num ')' : {unwrap_bin('$1'), '$3', '$5'}.

DataType01.                       DataType ::= "BFILE"                               ;
DataType02.                       DataType ::= "BINARY_DOUBLE"                       ;
DataType03.                       DataType ::= "BINARY_FLOAT"                        ;
DataType04.                       DataType ::= "BLOB"                                ;
DataType05.                       DataType ::= "CHAR"                                ;
DataType06.                       DataType ::= "CLOB"                                ;
DataType07.                       DataType ::= "DATE"                                ;
DataType08.                       DataType ::= "FLOAT"                               ;
DataType09.                       DataType ::= "LONG"                                ;
DataType10.                       DataType ::= "LONG RAW"                            ;
DataType11.                       DataType ::= Identifier                            ;
DataType12.                       DataType ::= Identifier "." "NAME"                 ;
DataType13.                       DataType ::= "NCLOB"                               ;
DataType14.                       DataType ::= "NUMBER"                              ;
DataType15.                       DataType ::= "RAW"                                 ;
DataType16.                       DataType ::= "ROWID"                               ;
DataType17.                       DataType ::= "TIMESTAMP"                           ;
DataType18.                       DataType ::= "UROWID"                              ;
DataType19.                       DataType ::= "VARCHAR2"                            ;
DataType20.                       DataType ::= "XMLTYPE"                             ;
DataType21.                       DataType ::= "CHAR"      "(" SgnNum ")"            ;
DataType22.                       DataType ::= "FLOAT"     "(" SgnNum ")"            ;
DataType23.                       DataType ::= "NAME"      "(" SgnNum ")"            ;
DataType24.                       DataType ::= "NCHAR"     "(" SgnNum ")"            ;
DataType25.                       DataType ::= "NUMBER"    "(" SgnNum ")"            ;
DataType26.                       DataType ::= "NVARCHAR2" "(" SgnNum ")"            ;
DataType27.                       DataType ::= "RAW"       "(" SgnNum ")"            ;
DataType28.                       DataType ::= "TIMESTAMP" "(" SgnNum ")"            ;
DataType29.                       DataType ::= "UROWID"    "(" SgnNum ")"            ;
DataType30.                       DataType ::= "VARCHAR2"  "(" SgnNum ")"            ;
DataType31.                       DataType ::= "NAME"      "(" SgnNum "," SgnNum ")" ;
DataType32.                       DataType ::= "NUMBER"    "(" SgnNum "," SgnNum ")" ;

-- sgn_num ->     INTNUM : unwrap_bin('$1').
-- sgn_num -> '-' INTNUM : list_to_binary(["-",unwrap_bin('$2')]).

SgnNum01.                         SgnNum ::=     "INTNUM" ;
SgnNum02.                         SgnNum ::= "-" "INTNUM" ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- the various things you can name
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- column -> identifier : '$1'.

Column01.                         Column ::= Identifier   ;

-- cursor -> identifier : {cur, binary_to_list('$1')}.

Cursor01.                         Cursor ::= Identifier ;

-- parameter -> PARAMETER : {param, unwrap_bin('$1')}.

Parameter01.                      Parameter ::= "PARAMETER" ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- identifier
--
-- Attention: The commented out terminals cause reduce/reduce problems.
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- identifier -> NAME            : unwrap_bin('$1').

-- identifier -> ADMIN           : unwrap_bin('$1').
-- identifier -> AUTHENTICATION  : unwrap_bin('$1').
-- identifier -> AUTHORIZATION   : unwrap_bin('$1').
-- identifier -> BAG             : unwrap_bin('$1').
-- identifier -> BEGIN           : unwrap_bin('$1').
-- identifier -> BFILE           : unwrap_bin('$1').
-- identifier -> BINARY_DOUBLE   : unwrap_bin('$1').
-- identifier -> BINARY_FLOAT    : unwrap_bin('$1').
-- identifier -> BITMAP          : unwrap_bin('$1').
-- identifier -> BLOB            : unwrap_bin('$1').
-- identifier -> BODY            : unwrap_bin('$1').
-- identifier -> CALL            : unwrap_bin('$1').
-- identifier -> CASCADE         : unwrap_bin('$1').
-- identifier -> CLOB            : unwrap_bin('$1').
-- identifier -> CLOSE           : unwrap_bin('$1').
-- identifier -> COMMIT          : unwrap_bin('$1').
-- identifier -> COMPARISON      : unwrap_bin('$1').
-- identifier -> CONSTRAINTS     : unwrap_bin('$1').
-- identifier -> CONTENTS        : unwrap_bin('$1').
-- identifier -> CONTEXT         : unwrap_bin('$1').
-- identifier -> CONTINUE        : unwrap_bin('$1').
-- identifier -> CROSS           : unwrap_bin('$1').
-- identifier -> CURRENT         : unwrap_bin('$1').
-- identifier -> CURSOR          : unwrap_bin('$1').
-- identifier -> DATABASE        : unwrap_bin('$1').
-- identifier -> DATAFILES       : unwrap_bin('$1').
-- identifier -> DBLINK          : unwrap_bin('$1').
-- identifier -> DEFERRED        : unwrap_bin('$1').
-- identifier -> DELEGATE        : unwrap_bin('$1').
-- identifier -> DIRECTORY       : unwrap_bin('$1').
-- identifier -> END             : unwrap_bin('$1').
-- identifier -> ENTERPRISE      : unwrap_bin('$1').
-- identifier -> ESCAPE          : unwrap_bin('$1').
-- identifier -> EXCEPT          : unwrap_bin('$1').
-- identifier -> EXECUTE         : unwrap_bin('$1').
-- identifier -> EXTERNALLY      : unwrap_bin('$1').
-- identifier -> FETCH           : unwrap_bin('$1').
-- identifier -> FILTER_WITH     : unwrap_bin('$1').
-- identifier -> FORCE           : unwrap_bin('$1').
-- identifier -> FOREIGN         : unwrap_bin('$1').
-- identifier -> FOUND           : unwrap_bin('$1').
-- identifier -> FULL            : unwrap_bin('$1').
-- identifier -> FUNCTION        : unwrap_bin('$1').
-- identifier -> GLOBALLY        : unwrap_bin('$1').
-- identifier -> GOTO            : unwrap_bin('$1').
-- identifier -> HASHMAP         : unwrap_bin('$1').
-- identifier -> HIERARCHY       : unwrap_bin('$1').
-- identifier -> IF              : unwrap_bin('$1').
-- identifier -> IMMEDIATE       : unwrap_bin('$1').
-- identifier -> INCLUDING       : unwrap_bin('$1').
-- identifier -> INDICATOR       : unwrap_bin('$1').
-- identifier -> INNER           : unwrap_bin('$1').
-- identifier -> INVALIDATION    : unwrap_bin('$1').
-- identifier -> JOIN            : unwrap_bin('$1').
-- identifier -> JSON            : unwrap_bin('$1').
-- identifier -> KEEP            : unwrap_bin('$1').
-- identifier -> KEY             : unwrap_bin('$1').
-- identifier -> KEYLIST         : unwrap_bin('$1').
-- identifier -> LEFT            : unwrap_bin('$1').
-- identifier -> LINK            : unwrap_bin('$1').
-- identifier -> LOCAL           : unwrap_bin('$1').
-- identifier -> LOG             : unwrap_bin('$1').
-- identifier -> MATERIALIZED    : unwrap_bin('$1').
-- identifier -> NATURAL         : unwrap_bin('$1').
-- identifier -> NCHAR           : unwrap_bin('$1').
-- identifier -> NCLOB           : unwrap_bin('$1').
-- identifier -> NO              : unwrap_bin('$1').
-- identifier -> NONE            : unwrap_bin('$1').
-- identifier -> NORM_WITH       : unwrap_bin('$1').
-- identifier -> NVARCHAR2       : unwrap_bin('$1').
-- identifier -> ONLINE          : unwrap_bin('$1').
-- identifier -> OPEN            : unwrap_bin('$1').
-- identifier -> ORDERED_SET     : unwrap_bin('$1').
-- identifier -> OUTER           : unwrap_bin('$1').
-- identifier -> PACKAGE         : unwrap_bin('$1').
-- identifier -> PARTITION       : unwrap_bin('$1').
-- identifier -> PRESERVE        : unwrap_bin('$1').
-- identifier -> PRIMARY         : unwrap_bin('$1').
-- identifier -> PRIVILEGES      : unwrap_bin('$1').
-- identifier -> PROCEDURE       : unwrap_bin('$1').
-- identifier -> PROFILE         : unwrap_bin('$1').
-- identifier -> PURGE           : unwrap_bin('$1').
-- identifier -> ROWID           : unwrap_bin('$1').
-- identifier -> QUOTA           : unwrap_bin('$1').
-- identifier -> REFERENCES      : unwrap_bin('$1').
-- identifier -> REQUIRED        : unwrap_bin('$1').
-- identifier -> RETURN          : unwrap_bin('$1').
-- identifier -> RETURNING       : unwrap_bin('$1').
-- identifier -> REUSE           : unwrap_bin('$1').
-- identifier -> RIGHT           : unwrap_bin('$1').
-- identifier -> ROLE            : unwrap_bin('$1').
-- identifier -> ROLES           : unwrap_bin('$1').
-- identifier -> ROLLBACK        : unwrap_bin('$1').
-- identifier -> SCHEMA          : unwrap_bin('$1').
-- identifier -> SEQUENCE        : unwrap_bin('$1').
-- identifier -> SQLERROR        : unwrap_bin('$1').
-- identifier -> STORAGE         : unwrap_bin('$1').
-- identifier -> TIMESTAMP       : unwrap_bin('$1').
-- identifier -> TYPE            : unwrap_bin('$1').
-- identifier -> UNLIMITED       : unwrap_bin('$1').
-- identifier -> UROWID          : unwrap_bin('$1').
-- identifier -> USERS           : unwrap_bin('$1').
-- identifier -> USING           : unwrap_bin('$1').
-- identifier -> VALIDATE        : unwrap_bin('$1').
-- identifier -> WHENEVER        : unwrap_bin('$1').
-- identifier -> WORK            : unwrap_bin('$1').
-- identifier -> XMLTYPE         : unwrap_bin('$1').

Identifier001.                     Identifier ::= "NAME"           ;
Identifier002.                     Identifier ::= "ADMIN"          ;
Identifier003.                     Identifier ::= "AUTHENTICATION" ;
Identifier004.                     Identifier ::= "AUTHORIZATION"  ;
Identifier005.                     Identifier ::= "BAG"            ;
Identifier006.                     Identifier ::= "BEGIN"          ;
Identifier007.                     Identifier ::= "BFILE"          ;
Identifier008.                     Identifier ::= "BINARY_DOUBLE"  ;
Identifier009.                     Identifier ::= "BINARY_FLOAT"   ;
Identifier010.                     Identifier ::= "BITMAP"         ;
Identifier011.                     Identifier ::= "BLOB"           ;
Identifier012.                     Identifier ::= "BODY"           ;
Identifier013.                     Identifier ::= "CALL"           ;
Identifier014.                     Identifier ::= "CASCADE"        ;
Identifier015.                     Identifier ::= "CLOB"           ;
Identifier016.                     Identifier ::= "CLOSE"          ;
Identifier017.                     Identifier ::= "COMMIT"         ;
Identifier018.                     Identifier ::= "COMPARISON"     ;
Identifier019.                     Identifier ::= "CONSTRAINTS"    ;
Identifier020.                     Identifier ::= "CONTENTS"       ;
Identifier021.                     Identifier ::= "CONTEXT"        ;
Identifier022.                     Identifier ::= "CONTINUE"       ;
Identifier023.                     Identifier ::= "CROSS"          ;
Identifier024.                     Identifier ::= "CURRENT"        ;
Identifier025.                     Identifier ::= "CURSOR"         ;
Identifier026.                     Identifier ::= "DATABASE"       ;
Identifier027.                     Identifier ::= "DATAFILES"      ;
Identifier028.                     Identifier ::= "DBLINK"         ;
Identifier029.                     Identifier ::= "DEFERRED"       ;
Identifier030.                     Identifier ::= "DELEGATE"       ;
Identifier031.                     Identifier ::= "DIRECTORY"      ;
Identifier032.                     Identifier ::= "END"            ;
Identifier033.                     Identifier ::= "ENTERPRISE"     ;
Identifier034.                     Identifier ::= "ESCAPE"         ;
Identifier035.                     Identifier ::= "EXCEPT"         ;
Identifier036.                     Identifier ::= "EXECUTE"        ;
Identifier037.                     Identifier ::= "EXTERNALLY"     ;
Identifier038.                     Identifier ::= "FETCH"          ;
Identifier039.                     Identifier ::= "FILTER_WITH"    ;
Identifier040.                     Identifier ::= "FORCE"          ;
Identifier041.                     Identifier ::= "FOREIGN"        ;
Identifier042.                     Identifier ::= "FOUND"          ;
Identifier043.                     Identifier ::= "FULL"           ;
Identifier044.                     Identifier ::= "FUNCTION"       ;
Identifier045.                     Identifier ::= "GLOBALLY"       ;
Identifier046.                     Identifier ::= "GOTO"           ;
Identifier047.                     Identifier ::= "HASHMAP"        ;
Identifier048.                     Identifier ::= "HIERARCHY"      ;
Identifier049.                     Identifier ::= "IF"             ;
Identifier050.                     Identifier ::= "IMMEDIATE"      ;
Identifier051.                     Identifier ::= "INCLUDING"      ;
Identifier052.                     Identifier ::= "INDICATOR"      ;
Identifier053.                     Identifier ::= "INNER"          ;
Identifier054.                     Identifier ::= "INVALIDATION"   ;
Identifier055.                     Identifier ::= "JOIN"           ;
Identifier056.                     Identifier ::= "JSON"           ;
Identifier057.                     Identifier ::= "KEEP"           ;
Identifier058.                     Identifier ::= "KEY"            ;
Identifier059.                     Identifier ::= "KEYLIST"        ;
Identifier060.                     Identifier ::= "LEFT"           ;
Identifier061.                     Identifier ::= "LINK"           ;
Identifier062.                     Identifier ::= "LOCAL"          ;
Identifier063.                     Identifier ::= "LOG"            ;
Identifier064.                     Identifier ::= "MATERIALIZED"   ;
Identifier065.                     Identifier ::= "NATURAL"        ;
Identifier066.                     Identifier ::= "NCHAR"          ;
Identifier067.                     Identifier ::= "NCLOB"          ;
Identifier068.                     Identifier ::= "NO"             ;
Identifier069.                     Identifier ::= "NONE"           ;
Identifier070.                     Identifier ::= "NORM_WITH"      ;
Identifier071.                     Identifier ::= "NVARCHAR2"      ;
Identifier072.                     Identifier ::= "ONLINE"         ;
Identifier073.                     Identifier ::= "OPEN"           ;
Identifier074.                     Identifier ::= "ORDERED_SET"    ;
Identifier075.                     Identifier ::= "OUTER"          ;
Identifier076.                     Identifier ::= "PACKAGE"        ;
Identifier077.                     Identifier ::= "PARTITION"      ;
Identifier078.                     Identifier ::= "PRESERVE"       ;
Identifier079.                     Identifier ::= "PRIMARY"        ;
Identifier080.                     Identifier ::= "PRIVILEGES"     ;
Identifier081.                     Identifier ::= "PROCEDURE"      ;
Identifier082.                     Identifier ::= "PROFILE"        ;
Identifier083.                     Identifier ::= "PURGE"          ;
Identifier084.                     Identifier ::= "QUOTA"          ;
Identifier085.                     Identifier ::= "RAW"            ;
Identifier086.                     Identifier ::= "REFERENCES"     ;
Identifier087.                     Identifier ::= "REQUIRED"       ;
Identifier088.                     Identifier ::= "RETURN"         ;
Identifier089.                     Identifier ::= "RETURNING"      ;
Identifier090.                     Identifier ::= "REUSE"          ;
Identifier091.                     Identifier ::= "RIGHT"          ;
Identifier092.                     Identifier ::= "ROLE"           ;
Identifier093.                     Identifier ::= "ROLES"          ;
Identifier094.                     Identifier ::= "ROLLBACK"       ;
Identifier095.                     Identifier ::= "SCHEMA"         ;
Identifier096.                     Identifier ::= "SEQUENCE"       ;
Identifier097.                     Identifier ::= "SQLERROR"       ;
Identifier098.                     Identifier ::= "STORAGE"        ;
Identifier099.                     Identifier ::= "TIMESTAMP"      ;
Identifier100.                     Identifier ::= "TYPE"           ;
Identifier101.                     Identifier ::= "UNLIMITED"      ;
Identifier102.                     Identifier ::= "UROWID"         ;
Identifier103.                     Identifier ::= "USERS"          ;
Identifier104.                     Identifier ::= "USING"          ;
Identifier105.                     Identifier ::= "VALIDATE"       ;
Identifier106.                     Identifier ::= "WHENEVER"       ;
Identifier107.                     Identifier ::= "WORK"           ;
Identifier108.                     Identifier ::= "XMLTYPE"        ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- embedded condition things
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- when_action -> GOTO identifier : {goto, binary_to_list('$2')}.
-- when_action -> CONTINUE        : 'continue'.

WhenAction01.                     WhenAction ::= "GOTO" Identifier ;
WhenAction02.                     WhenAction ::= "CONTINUE"        ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- LBNF specifica
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

entrypoints PlSqlBlockSqlList ;
